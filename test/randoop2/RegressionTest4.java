package randoop2;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test001"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    tp2.ITime iTime12 = server0.getTime();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test002"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    long long16 = server0.getLastUpdate();
    java.lang.String str17 = server0.toString();
    boolean b18 = server0.repOK();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeBan(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test003"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    long long16 = server10.getLastUpdate();
    server10.update();
    boolean b18 = server10.repOK();
    tp2.ITime iTime19 = server10.getTime();
    tp2.ITime iTime20 = server10.getTime();
    server0.setTime(iTime20);
    java.lang.String str22 = server0.toString();
    tp2.IP iP23 = null;
    boolean b24 = server0.addBan(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424051847, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424051847, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424051848, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424051848, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424051848L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424051848L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424051847, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424051847, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test004"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    boolean b6 = server0.repOK();
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    boolean b11 = server0.repOK();
    java.lang.String str12 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424051851L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424051851, exceptions=(), bans={[IPBan [ip=null, expires=1465424111851]]}]"+ "'", str8.equals("Server [lastUpdate=1465424051851, exceptions=(), bans={[IPBan [ip=null, expires=1465424111851]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424051851, exceptions=(), bans={[IPBan [ip=null, expires=1465424111851]]}]"+ "'", str12.equals("Server [lastUpdate=1465424051851, exceptions=(), bans={[IPBan [ip=null, expires=1465424111851]]}]"));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test005"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    java.lang.String str8 = server0.toString();
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    tp2.ITime iTime12 = server0.getTime();
    long long13 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 0L);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test006"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    server0.update();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=1465424051853, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=1465424051853, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test007"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.removeException(iP13);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424051853, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424051853, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424051853L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424051853L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424051853, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424051853, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test008"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    java.lang.String str13 = server9.toString();
    long long14 = server9.getLastUpdate();
    long long15 = server9.getLastUpdate();
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    tp2.IP iP19 = null;
    boolean b20 = server16.addBan(iP19);
    tp2.ITime iTime21 = server16.getTime();
    server9.setTime(iTime21);
    server0.setTime(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424051855, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424051855, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424051855, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424051855, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424051855L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424051855L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test009"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.removeBan(iP14);
    boolean b16 = server0.repOK();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    tp2.IP iP23 = null;
    boolean b24 = server19.addBan(iP23);
    boolean b25 = server19.repOK();
    long long26 = server19.getLastUpdate();
    java.lang.String str27 = server19.toString();
    java.lang.String str28 = server19.toString();
    boolean b29 = server19.repOK();
    tp2.ITime iTime30 = server19.getTime();
    server0.setTime(iTime30);
    tp2.IP iP32 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b33 = server0.connect(iP32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424051867L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424051867, exceptions=(), bans={[IPBan [ip=null, expires=1465424111867]]}]"+ "'", str27.equals("Server [lastUpdate=1465424051867, exceptions=(), bans={[IPBan [ip=null, expires=1465424111867]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=1465424051867, exceptions=(), bans={[IPBan [ip=null, expires=1465424111867]]}]"+ "'", str28.equals("Server [lastUpdate=1465424051867, exceptions=(), bans={[IPBan [ip=null, expires=1465424111867]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test010"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    server0.setTime(iTime16);
    long long18 = server0.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeBan(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server21.setTime(iTime33);
    long long36 = server21.getLastUpdate();
    tp2.ITime iTime37 = server21.getTime();
    server0.setTime(iTime37);
    tp2.IP iP39 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b40 = server0.addException(iP39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424051867, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424051867, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424051867L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424051868L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test011"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    java.lang.String str18 = server0.toString();
    long long19 = server0.getLastUpdate();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    java.lang.String str24 = server20.toString();
    tp2.ITime iTime25 = server20.getTime();
    tp2.IP iP26 = null;
    boolean b27 = server20.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    tp2.ITime iTime30 = server28.getTime();
    server28.update();
    java.lang.String str32 = server28.toString();
    long long33 = server28.getLastUpdate();
    long long34 = server28.getLastUpdate();
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    tp2.IP iP38 = null;
    boolean b39 = server35.addBan(iP38);
    tp2.ITime iTime40 = server35.getTime();
    server28.setTime(iTime40);
    server20.setTime(iTime40);
    server0.setTime(iTime40);
    tp2.IP iP44 = null;
    boolean b45 = server0.removeException(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465424051869, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465424051869, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1465424051869L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424051870, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=1465424051870, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=1465424051870, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=1465424051870, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 1465424051870L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1465424051870L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test012"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    tp2.IP iP12 = null;
    boolean b13 = server8.removeException(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server8.setTime(iTime16);
    tp2.ITime iTime18 = server8.getTime();
    server0.setTime(iTime18);
    long long20 = server0.getLastUpdate();
    java.lang.String str21 = server0.toString();
    long long22 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424051879, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424051879, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1465424051879L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424051879, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424051879, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424051879L);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test013"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.ITime iTime16 = server0.getTime();
    boolean b17 = server0.repOK();
    java.lang.String str18 = server0.toString();
    long long19 = server0.getLastUpdate();
    java.lang.String str20 = server0.toString();
    boolean b21 = server0.repOK();
    java.lang.String str22 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test014"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    tp2.ITime iTime37 = server0.getTime();
    tp2.IP iP38 = null;
    boolean b39 = server0.removeBan(iP38);
    tp2.IP iP40 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b41 = server0.addException(iP40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test015"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.connect(iP18);
    server0.update();
    tp2.IP iP21 = null;
    boolean b22 = server0.removeException(iP21);
    tp2.IP iP23 = null;
    boolean b24 = server0.addBan(iP23);
    long long25 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424051887L);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test016"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    tp2.IP iP3 = null;
    boolean b4 = server0.connect(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    boolean b7 = server0.repOK();
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.IP iP10 = null;
    boolean b11 = server8.removeException(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server8.connect(iP12);
    long long14 = server8.getLastUpdate();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.IP iP19 = null;
    boolean b20 = server15.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server15.setTime(iTime23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    java.lang.String str31 = server27.toString();
    long long32 = server27.getLastUpdate();
    tp2.ITime iTime33 = server27.getTime();
    server25.setTime(iTime33);
    server15.setTime(iTime33);
    server8.setTime(iTime33);
    server0.setTime(iTime33);
    java.lang.String str38 = server0.toString();
    tp2.IP iP39 = null;
    boolean b40 = server0.addBan(iP39);
    long long41 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=1465424051889, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=1465424051889, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1465424051889L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 0L);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test017"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    long long16 = server0.getLastUpdate();
    tp2.ITime iTime17 = server0.getTime();
    boolean b18 = server0.repOK();
    tp2.ITime iTime19 = server0.getTime();
    tp2.IP iP20 = null;
    boolean b21 = server0.addBan(iP20);
    tp2.Server server22 = new tp2.Server();
    server22.update();
    long long24 = server22.getLastUpdate();
    java.lang.String str25 = server22.toString();
    long long26 = server22.getLastUpdate();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    boolean b33 = server27.repOK();
    tp2.IP iP34 = null;
    boolean b35 = server27.removeException(iP34);
    tp2.IP iP36 = null;
    boolean b37 = server27.connect(iP36);
    long long38 = server27.getLastUpdate();
    tp2.ITime iTime39 = server27.getTime();
    tp2.ITime iTime40 = server27.getTime();
    long long41 = server27.getLastUpdate();
    server27.update();
    tp2.ITime iTime43 = server27.getTime();
    server22.setTime(iTime43);
    server0.setTime(iTime43);
    boolean b46 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424051896L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424051896L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424051896, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=1465424051896, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424051896L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long38 == 1465424051897L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424051897L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test018"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    tp2.ITime iTime17 = null;
    server16.setTime(iTime17);
    tp2.IP iP19 = null;
    boolean b20 = server16.removeException(iP19);
    tp2.IP iP21 = null;
    boolean b22 = server16.connect(iP21);
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    java.lang.String str27 = server23.toString();
    tp2.IP iP28 = null;
    boolean b29 = server23.removeBan(iP28);
    tp2.ITime iTime30 = server23.getTime();
    java.lang.String str31 = server23.toString();
    tp2.IP iP32 = null;
    boolean b33 = server23.removeBan(iP32);
    tp2.IP iP34 = null;
    boolean b35 = server23.removeBan(iP34);
    boolean b36 = server23.repOK();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.IP iP39 = null;
    boolean b40 = server37.removeException(iP39);
    tp2.IP iP41 = null;
    boolean b42 = server37.connect(iP41);
    tp2.IP iP43 = null;
    boolean b44 = server37.addBan(iP43);
    tp2.ITime iTime45 = server37.getTime();
    server23.setTime(iTime45);
    server16.setTime(iTime45);
    server0.setTime(iTime45);
    tp2.ITime iTime49 = server0.getTime();
    boolean b50 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424051905, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=1465424051905, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=1465424051905, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=1465424051905, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test019"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    server0.setTime(iTime16);
    long long18 = server0.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeBan(iP19);
    tp2.ITime iTime21 = server0.getTime();
    java.lang.String str22 = server0.toString();
    long long23 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424051937, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424051937, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424051937L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 0L);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test020"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    boolean b16 = server0.repOK();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.IP iP21 = null;
    boolean b22 = server17.removeException(iP21);
    boolean b23 = server17.repOK();
    tp2.IP iP24 = null;
    boolean b25 = server17.removeException(iP24);
    tp2.IP iP26 = null;
    boolean b27 = server17.connect(iP26);
    tp2.ITime iTime28 = server17.getTime();
    tp2.Server server29 = new tp2.Server();
    tp2.ITime iTime30 = null;
    server29.setTime(iTime30);
    tp2.IP iP32 = null;
    boolean b33 = server29.removeException(iP32);
    tp2.IP iP34 = null;
    boolean b35 = server29.connect(iP34);
    boolean b36 = server29.repOK();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    tp2.IP iP41 = null;
    boolean b42 = server37.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server37.setTime(iTime45);
    server37.update();
    tp2.ITime iTime48 = server37.getTime();
    tp2.ITime iTime49 = server37.getTime();
    server29.setTime(iTime49);
    server17.setTime(iTime49);
    tp2.IP iP52 = null;
    boolean b53 = server17.removeException(iP52);
    tp2.IP iP54 = null;
    boolean b55 = server17.addBan(iP54);
    java.lang.String str56 = server17.toString();
    tp2.ITime iTime57 = server17.getTime();
    server0.setTime(iTime57);
    server0.update();
    java.lang.String str60 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=1465424051942, exceptions=(), bans={[IPBan [ip=null, expires=1465424111943]]}]"+ "'", str56.equals("Server [lastUpdate=1465424051942, exceptions=(), bans={[IPBan [ip=null, expires=1465424111943]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=1465424051943, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=1465424051943, exceptions=(), bans={}]"));

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test021"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    long long22 = server0.getLastUpdate();
    tp2.ITime iTime23 = server0.getTime();
    tp2.ITime iTime24 = server0.getTime();
    tp2.IP iP25 = null;
    boolean b26 = server0.addBan(iP25);
    java.lang.String str27 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424051953L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424051953, exceptions=(), bans={[IPBan [ip=null, expires=1465424111955]]}]"+ "'", str27.equals("Server [lastUpdate=1465424051953, exceptions=(), bans={[IPBan [ip=null, expires=1465424111955]]}]"));

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test022"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    long long4 = server0.getLastUpdate();
    tp2.ITime iTime5 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 1465424051961L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test023"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.removeBan(iP4);
    boolean b6 = server0.repOK();
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    boolean b10 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test024"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    boolean b9 = server0.repOK();
    java.lang.String str10 = server0.toString();
    boolean b11 = server0.repOK();
    java.lang.String str12 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424051962, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424051962, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424051962L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424051962, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424051962, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424051962, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424051962, exceptions=(), bans={}]"));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test025"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    long long18 = server0.getLastUpdate();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    tp2.ITime iTime26 = server19.getTime();
    server0.setTime(iTime26);
    tp2.ITime iTime28 = server0.getTime();
    boolean b29 = server0.repOK();
    server0.update();
    tp2.ITime iTime31 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424051963L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424051964, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424051964, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424051964L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test026"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.ITime iTime9 = server0.getTime();
    server0.update();
    boolean b11 = server0.repOK();
    long long12 = server0.getLastUpdate();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424051973, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424051973, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424051973L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424051974L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test027"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    boolean b4 = server0.repOK();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeBan(iP10);
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server12.setTime(iTime20);
    tp2.ITime iTime22 = server12.getTime();
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    tp2.IP iP27 = null;
    boolean b28 = server23.removeException(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server23.setTime(iTime31);
    server12.setTime(iTime31);
    server5.setTime(iTime31);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server35.update();
    java.lang.String str39 = server35.toString();
    long long40 = server35.getLastUpdate();
    long long41 = server35.getLastUpdate();
    tp2.IP iP42 = null;
    boolean b43 = server35.removeException(iP42);
    java.lang.String str44 = server35.toString();
    tp2.IP iP45 = null;
    boolean b46 = server35.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.IP iP49 = null;
    boolean b50 = server47.removeException(iP49);
    tp2.ITime iTime51 = server47.getTime();
    server35.setTime(iTime51);
    server5.setTime(iTime51);
    server0.setTime(iTime51);
    tp2.IP iP55 = null;
    boolean b56 = server0.removeBan(iP55);
    tp2.IP iP57 = null;
    boolean b58 = server0.connect(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424051975, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424051975, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424051975, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424051975, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1465424051975L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424051975L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=1465424051975, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=1465424051975, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test028"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.ITime iTime5 = server0.getTime();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    tp2.IP iP12 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b13 = server0.addException(iP12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test029"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.IP iP13 = null;
    boolean b14 = server11.removeException(iP13);
    boolean b15 = server11.repOK();
    tp2.ITime iTime16 = server11.getTime();
    server0.setTime(iTime16);
    tp2.IP iP18 = null;
    boolean b19 = server0.removeBan(iP18);
    tp2.IP iP20 = null;
    boolean b21 = server0.removeException(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test030"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.IP iP18 = null;
    boolean b19 = server14.removeException(iP18);
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server14.setTime(iTime22);
    tp2.ITime iTime24 = server14.getTime();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server14.setTime(iTime33);
    server7.setTime(iTime33);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    long long42 = server37.getLastUpdate();
    long long43 = server37.getLastUpdate();
    tp2.IP iP44 = null;
    boolean b45 = server37.removeException(iP44);
    java.lang.String str46 = server37.toString();
    tp2.IP iP47 = null;
    boolean b48 = server37.addBan(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.IP iP51 = null;
    boolean b52 = server49.removeException(iP51);
    tp2.ITime iTime53 = server49.getTime();
    server37.setTime(iTime53);
    server7.setTime(iTime53);
    tp2.ITime iTime56 = server7.getTime();
    server0.setTime(iTime56);
    java.lang.String str58 = server0.toString();
    tp2.Server server59 = new tp2.Server();
    java.lang.String str60 = server59.toString();
    tp2.ITime iTime61 = server59.getTime();
    server59.update();
    java.lang.String str63 = server59.toString();
    tp2.ITime iTime64 = server59.getTime();
    tp2.IP iP65 = null;
    boolean b66 = server59.removeException(iP65);
    tp2.Server server67 = new tp2.Server();
    java.lang.String str68 = server67.toString();
    tp2.ITime iTime69 = server67.getTime();
    server67.update();
    java.lang.String str71 = server67.toString();
    long long72 = server67.getLastUpdate();
    tp2.ITime iTime73 = server67.getTime();
    boolean b74 = server67.repOK();
    tp2.ITime iTime75 = server67.getTime();
    server67.update();
    tp2.ITime iTime77 = server67.getTime();
    server59.setTime(iTime77);
    server0.setTime(iTime77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424051986, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424051986, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424051986L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424051987, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424051987, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424051988, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424051988, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1465424051988L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 1465424051988L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=1465424051988, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=1465424051988, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=1465424051987, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=1465424051987, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=1465424051989, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=1465424051989, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=1465424051990, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=1465424051990, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 1465424051990L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime77);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test031"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.addBan(iP22);
    java.lang.String str24 = server0.toString();
    java.lang.String str25 = server0.toString();
    long long26 = server0.getLastUpdate();
    tp2.IP iP27 = null;
    boolean b28 = server0.removeException(iP27);
    boolean b29 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424052014, exceptions=(), bans={[IPBan [ip=null, expires=1465424112014]]}]"+ "'", str24.equals("Server [lastUpdate=1465424052014, exceptions=(), bans={[IPBan [ip=null, expires=1465424112014]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424052014, exceptions=(), bans={[IPBan [ip=null, expires=1465424112014]]}]"+ "'", str25.equals("Server [lastUpdate=1465424052014, exceptions=(), bans={[IPBan [ip=null, expires=1465424112014]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424052014L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test032"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    java.lang.String str13 = server0.toString();
    java.lang.String str14 = server0.toString();
    tp2.ITime iTime15 = server0.getTime();
    tp2.ITime iTime16 = server0.getTime();
    tp2.IP iP17 = null;
    boolean b18 = server0.removeException(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052018, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052018, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052018L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052018, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424052018, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052018, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424052018, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test033"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    server0.update();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    tp2.IP iP13 = null;
    boolean b14 = server9.removeException(iP13);
    boolean b15 = server9.repOK();
    tp2.IP iP16 = null;
    boolean b17 = server9.connect(iP16);
    long long18 = server9.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server9.connect(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    java.lang.String str25 = server21.toString();
    long long26 = server21.getLastUpdate();
    tp2.ITime iTime27 = server21.getTime();
    tp2.IP iP28 = null;
    boolean b29 = server21.removeBan(iP28);
    boolean b30 = server21.repOK();
    long long31 = server21.getLastUpdate();
    boolean b32 = server21.repOK();
    tp2.ITime iTime33 = server21.getTime();
    server9.setTime(iTime33);
    server0.setTime(iTime33);
    java.lang.String str36 = server0.toString();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    tp2.IP iP41 = null;
    boolean b42 = server37.removeException(iP41);
    boolean b43 = server37.repOK();
    tp2.IP iP44 = null;
    boolean b45 = server37.removeException(iP44);
    tp2.IP iP46 = null;
    boolean b47 = server37.connect(iP46);
    server37.update();
    long long49 = server37.getLastUpdate();
    boolean b50 = server37.repOK();
    long long51 = server37.getLastUpdate();
    tp2.ITime iTime52 = server37.getTime();
    server0.setTime(iTime52);
    tp2.IP iP54 = null;
    boolean b55 = server0.removeException(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052021, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052021, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424052021L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424052022, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=1465424052022, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424052022L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1465424052022L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=1465424052021, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=1465424052021, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1465424052023L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 1465424052023L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test034"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    boolean b16 = server0.repOK();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    tp2.ITime iTime19 = server0.getTime();
    long long20 = server0.getLastUpdate();
    tp2.IP iP21 = null;
    boolean b22 = server0.removeException(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test035"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.ITime iTime5 = server0.getTime();
    long long6 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    boolean b10 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test036"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    java.lang.String str10 = server0.toString();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    long long13 = server0.getLastUpdate();
    tp2.IP iP14 = null;
    boolean b15 = server0.removeException(iP14);
    tp2.ITime iTime16 = server0.getTime();
    server0.update();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test037"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.ITime iTime13 = null;
    server0.setTime(iTime13);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server15.addBan(iP18);
    tp2.IP iP20 = null;
    boolean b21 = server15.removeException(iP20);
    long long22 = server15.getLastUpdate();
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server23.setTime(iTime35);
    server15.setTime(iTime35);
    server0.setTime(iTime35);
    long long40 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424052045L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1465424052045L);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test038"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    long long2 = server0.getLastUpdate();
    long long3 = server0.getLastUpdate();
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeBan(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.addBan(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1465424052063L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 1465424052063L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test039"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.IP iP18 = null;
    boolean b19 = server14.removeException(iP18);
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server14.setTime(iTime22);
    tp2.ITime iTime24 = server14.getTime();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server14.setTime(iTime33);
    server7.setTime(iTime33);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    long long42 = server37.getLastUpdate();
    long long43 = server37.getLastUpdate();
    tp2.IP iP44 = null;
    boolean b45 = server37.removeException(iP44);
    java.lang.String str46 = server37.toString();
    tp2.IP iP47 = null;
    boolean b48 = server37.addBan(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.IP iP51 = null;
    boolean b52 = server49.removeException(iP51);
    tp2.ITime iTime53 = server49.getTime();
    server37.setTime(iTime53);
    server7.setTime(iTime53);
    tp2.ITime iTime56 = server7.getTime();
    server0.setTime(iTime56);
    tp2.IP iP58 = null;
    boolean b59 = server0.addBan(iP58);
    long long60 = server0.getLastUpdate();
    long long61 = server0.getLastUpdate();
    tp2.IP iP62 = null;
    boolean b63 = server0.removeException(iP62);
    tp2.IP iP64 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b65 = server0.connect(iP64);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052064, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052064, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052064L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052064, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052064, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424052066, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424052066, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1465424052066L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 1465424052066L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=1465424052066, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=1465424052066, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 1465424052064L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long61 == 1465424052064L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test040"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    java.lang.String str11 = server0.toString();
    tp2.ITime iTime12 = null;
    server0.setTime(iTime12);
    tp2.IP iP14 = null;
    boolean b15 = server0.removeBan(iP14);
    long long16 = server0.getLastUpdate();
    tp2.IP iP17 = null;
    boolean b18 = server0.removeException(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052068, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052068, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424052068L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test041"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    long long16 = server0.getLastUpdate();
    tp2.IP iP17 = null;
    boolean b18 = server0.connect(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424052069L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test042"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    server0.update();
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    long long21 = server11.getLastUpdate();
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    java.lang.String str26 = server22.toString();
    tp2.IP iP27 = null;
    boolean b28 = server22.removeBan(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    tp2.ITime iTime39 = server29.getTime();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    server29.setTime(iTime48);
    server22.setTime(iTime48);
    server11.setTime(iTime48);
    tp2.ITime iTime53 = server11.getTime();
    server0.setTime(iTime53);
    long long55 = server0.getLastUpdate();
    tp2.ITime iTime56 = server0.getTime();
    tp2.ITime iTime57 = server0.getTime();
    tp2.IP iP58 = null;
    boolean b59 = server0.removeBan(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052072, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052072, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424052073, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424052073, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424052073L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424052074, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424052074, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long55 == 1465424052073L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test043"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    long long16 = server11.getLastUpdate();
    long long17 = server11.getLastUpdate();
    tp2.IP iP18 = null;
    boolean b19 = server11.removeException(iP18);
    tp2.ITime iTime20 = server11.getTime();
    server11.update();
    tp2.IP iP22 = null;
    boolean b23 = server11.connect(iP22);
    tp2.IP iP24 = null;
    boolean b25 = server11.removeException(iP24);
    tp2.ITime iTime26 = server11.getTime();
    server0.setTime(iTime26);
    server0.update();
    server0.update();
    tp2.IP iP30 = null;
    boolean b31 = server0.removeException(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424052092, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424052092, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424052092L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424052092L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test044"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    boolean b2 = server0.repOK();
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.Server server5 = new tp2.Server();
    tp2.ITime iTime6 = null;
    server5.setTime(iTime6);
    tp2.IP iP8 = null;
    boolean b9 = server5.removeException(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server5.connect(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server5.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.IP iP16 = null;
    boolean b17 = server14.removeException(iP16);
    tp2.ITime iTime18 = server14.getTime();
    server5.setTime(iTime18);
    tp2.ITime iTime20 = server5.getTime();
    boolean b21 = server5.repOK();
    tp2.IP iP22 = null;
    boolean b23 = server5.addBan(iP22);
    tp2.ITime iTime24 = server5.getTime();
    server0.setTime(iTime24);
    long long26 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 0L);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test045"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    long long8 = server0.getLastUpdate();
    server0.update();
    java.lang.String str10 = server0.toString();
    long long11 = server0.getLastUpdate();
    boolean b12 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052099, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052099, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052099L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052099L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424052099L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424052099, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424052099, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052099L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test046"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test047"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server0.removeBan(iP18);
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.IP iP22 = null;
    boolean b23 = server20.removeException(iP22);
    tp2.IP iP24 = null;
    boolean b25 = server20.connect(iP24);
    tp2.IP iP26 = null;
    boolean b27 = server20.addBan(iP26);
    tp2.ITime iTime28 = server20.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    java.lang.String str33 = server29.toString();
    tp2.IP iP34 = null;
    boolean b35 = server29.removeBan(iP34);
    tp2.ITime iTime36 = server29.getTime();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    tp2.IP iP41 = null;
    boolean b42 = server37.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server37.setTime(iTime45);
    tp2.ITime iTime47 = server37.getTime();
    server29.setTime(iTime47);
    server20.setTime(iTime47);
    boolean b50 = server20.repOK();
    tp2.ITime iTime51 = server20.getTime();
    server0.setTime(iTime51);
    boolean b53 = server0.repOK();
    long long54 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=1465424052102, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=1465424052102, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 1465424052100L);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test048"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.ITime iTime11 = server0.getTime();
    tp2.Server server12 = new tp2.Server();
    tp2.ITime iTime13 = null;
    server12.setTime(iTime13);
    tp2.IP iP15 = null;
    boolean b16 = server12.removeException(iP15);
    tp2.IP iP17 = null;
    boolean b18 = server12.connect(iP17);
    boolean b19 = server12.repOK();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    tp2.IP iP24 = null;
    boolean b25 = server20.removeException(iP24);
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    tp2.ITime iTime28 = server26.getTime();
    server20.setTime(iTime28);
    server20.update();
    tp2.ITime iTime31 = server20.getTime();
    tp2.ITime iTime32 = server20.getTime();
    server12.setTime(iTime32);
    server0.setTime(iTime32);
    tp2.IP iP35 = null;
    boolean b36 = server0.removeException(iP35);
    tp2.IP iP37 = null;
    boolean b38 = server0.addBan(iP37);
    java.lang.String str39 = server0.toString();
    boolean b40 = server0.repOK();
    tp2.ITime iTime41 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424052116, exceptions=(), bans={[IPBan [ip=null, expires=1465424112117]]}]"+ "'", str39.equals("Server [lastUpdate=1465424052116, exceptions=(), bans={[IPBan [ip=null, expires=1465424112117]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test049"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    boolean b6 = server0.repOK();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = server0.removeBan(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=1465424052122, exceptions=(), bans={[IPBan [ip=null, expires=1465424112122]]}]"+ "'", str7.equals("Server [lastUpdate=1465424052122, exceptions=(), bans={[IPBan [ip=null, expires=1465424112122]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test050"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    server0.update();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    tp2.IP iP15 = null;
    boolean b16 = server12.addBan(iP15);
    tp2.ITime iTime17 = server12.getTime();
    tp2.ITime iTime18 = server12.getTime();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    tp2.ITime iTime26 = server19.getTime();
    tp2.IP iP27 = null;
    boolean b28 = server19.addBan(iP27);
    tp2.ITime iTime29 = server19.getTime();
    server12.setTime(iTime29);
    boolean b31 = server12.repOK();
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.ITime iTime34 = server32.getTime();
    server32.update();
    java.lang.String str36 = server32.toString();
    long long37 = server32.getLastUpdate();
    boolean b38 = server32.repOK();
    tp2.IP iP39 = null;
    boolean b40 = server32.removeException(iP39);
    boolean b41 = server32.repOK();
    long long42 = server32.getLastUpdate();
    boolean b43 = server32.repOK();
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    java.lang.String str48 = server44.toString();
    long long49 = server44.getLastUpdate();
    long long50 = server44.getLastUpdate();
    tp2.IP iP51 = null;
    boolean b52 = server44.removeException(iP51);
    tp2.ITime iTime53 = server44.getTime();
    server32.setTime(iTime53);
    server12.setTime(iTime53);
    server0.setTime(iTime53);
    boolean b57 = server0.repOK();
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    tp2.ITime iTime60 = server58.getTime();
    server58.update();
    java.lang.String str62 = server58.toString();
    long long63 = server58.getLastUpdate();
    tp2.ITime iTime64 = server58.getTime();
    boolean b65 = server58.repOK();
    tp2.ITime iTime66 = server58.getTime();
    server58.update();
    tp2.ITime iTime68 = server58.getTime();
    tp2.IP iP69 = null;
    boolean b70 = server58.removeBan(iP69);
    tp2.ITime iTime71 = server58.getTime();
    tp2.ITime iTime72 = server58.getTime();
    server0.setTime(iTime72);
    long long74 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424052125, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424052125, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424052125L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=1465424052125, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=1465424052125, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 1465424052125L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1465424052125L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465424052126, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=1465424052126, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1465424052126L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1465424052126L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=1465424052127, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=1465424052127, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1465424052127L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 1465424052124L);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test051"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.addBan(iP22);
    java.lang.String str24 = server0.toString();
    java.lang.String str25 = server0.toString();
    tp2.IP iP26 = null;
    boolean b27 = server0.removeException(iP26);
    tp2.IP iP28 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b29 = server0.connect(iP28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424052164, exceptions=(), bans={[IPBan [ip=null, expires=1465424112166]]}]"+ "'", str24.equals("Server [lastUpdate=1465424052164, exceptions=(), bans={[IPBan [ip=null, expires=1465424112166]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424052164, exceptions=(), bans={[IPBan [ip=null, expires=1465424112166]]}]"+ "'", str25.equals("Server [lastUpdate=1465424052164, exceptions=(), bans={[IPBan [ip=null, expires=1465424112166]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test052"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = server0.getTime();
    long long8 = server0.getLastUpdate();
    java.lang.String str9 = server0.toString();
    long long10 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 0L);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test053"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeBan(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.IP iP20 = null;
    boolean b21 = server16.removeException(iP20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server16.setTime(iTime24);
    tp2.ITime iTime26 = server16.getTime();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server16.setTime(iTime35);
    server9.setTime(iTime35);
    server0.setTime(iTime35);
    java.lang.String str40 = server0.toString();
    tp2.ITime iTime41 = server0.getTime();
    tp2.IP iP42 = null;
    boolean b43 = server0.removeException(iP42);
    tp2.IP iP44 = null;
    boolean b45 = server0.removeException(iP44);
    tp2.IP iP46 = null;
    boolean b47 = server0.connect(iP46);
    tp2.IP iP48 = null;
    boolean b49 = server0.connect(iP48);
    tp2.IP iP50 = null;
    boolean b51 = server0.addBan(iP50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052168, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424052168, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424052167, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424052167, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test054"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeBan(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.IP iP20 = null;
    boolean b21 = server16.removeException(iP20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server16.setTime(iTime24);
    tp2.ITime iTime26 = server16.getTime();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server16.setTime(iTime35);
    server9.setTime(iTime35);
    server0.setTime(iTime35);
    java.lang.String str40 = server0.toString();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    tp2.IP iP44 = null;
    boolean b45 = server41.addBan(iP44);
    tp2.IP iP46 = null;
    boolean b47 = server41.removeException(iP46);
    long long48 = server41.getLastUpdate();
    tp2.ITime iTime49 = server41.getTime();
    server0.setTime(iTime49);
    boolean b51 = server0.repOK();
    tp2.IP iP52 = null;
    boolean b53 = server0.connect(iP52);
    boolean b54 = server0.repOK();
    tp2.ITime iTime55 = server0.getTime();
    tp2.IP iP56 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b57 = server0.addException(iP56);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052184, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424052184, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424052182, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424052182, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test055"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    boolean b3 = server0.repOK();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime5);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test056"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    java.lang.String str22 = server0.toString();
    tp2.IP iP23 = null;
    boolean b24 = server0.connect(iP23);
    tp2.IP iP25 = null;
    boolean b26 = server0.removeException(iP25);
    tp2.ITime iTime27 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424052187, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424052187, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test057"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    java.lang.String str12 = server0.toString();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    tp2.IP iP15 = null;
    boolean b16 = server0.addBan(iP15);
    tp2.IP iP17 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b18 = server0.addBan(iP17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052196, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052196, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052196L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424052196L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424052196, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424052196, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test058"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    long long18 = server0.getLastUpdate();
    boolean b19 = server0.repOK();
    tp2.IP iP20 = null;
    boolean b21 = server0.removeException(iP20);
    tp2.IP iP22 = null;
    boolean b23 = server0.removeBan(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424052223L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test059"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeBan(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.IP iP20 = null;
    boolean b21 = server16.removeException(iP20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server16.setTime(iTime24);
    tp2.ITime iTime26 = server16.getTime();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server16.setTime(iTime35);
    server9.setTime(iTime35);
    server0.setTime(iTime35);
    tp2.IP iP40 = null;
    boolean b41 = server0.connect(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.ITime iTime44 = server42.getTime();
    server42.update();
    java.lang.String str46 = server42.toString();
    long long47 = server42.getLastUpdate();
    long long48 = server42.getLastUpdate();
    tp2.IP iP49 = null;
    boolean b50 = server42.removeException(iP49);
    tp2.ITime iTime51 = server42.getTime();
    server42.update();
    tp2.IP iP53 = null;
    boolean b54 = server42.connect(iP53);
    tp2.ITime iTime55 = server42.getTime();
    server0.setTime(iTime55);
    long long57 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052228, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424052228, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=1465424052229, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=1465424052229, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 1465424052229L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 1465424052229L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 1465424052227L);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test060"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    server0.update();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = null;
    server0.setTime(iTime8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    tp2.ITime iTime15 = server10.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server10.removeException(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server10.removeException(iP18);
    tp2.ITime iTime20 = server10.getTime();
    server0.setTime(iTime20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    tp2.IP iP26 = null;
    boolean b27 = server22.removeException(iP26);
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    tp2.ITime iTime30 = server28.getTime();
    server22.setTime(iTime30);
    tp2.ITime iTime32 = server22.getTime();
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server33.update();
    tp2.IP iP37 = null;
    boolean b38 = server33.removeException(iP37);
    tp2.Server server39 = new tp2.Server();
    java.lang.String str40 = server39.toString();
    tp2.ITime iTime41 = server39.getTime();
    server33.setTime(iTime41);
    server22.setTime(iTime41);
    long long44 = server22.getLastUpdate();
    java.lang.String str45 = server22.toString();
    tp2.IP iP46 = null;
    boolean b47 = server22.addBan(iP46);
    tp2.ITime iTime48 = server22.getTime();
    server0.setTime(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052249, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424052249, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 1465424052250L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465424052250, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=1465424052250, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test061"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    java.lang.String str16 = server12.toString();
    long long17 = server12.getLastUpdate();
    tp2.ITime iTime18 = server12.getTime();
    server10.setTime(iTime18);
    server0.setTime(iTime18);
    tp2.IP iP21 = null;
    boolean b22 = server0.removeBan(iP21);
    server0.update();
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    java.lang.String str28 = server24.toString();
    tp2.ITime iTime29 = server24.getTime();
    server24.update();
    server24.update();
    tp2.IP iP32 = null;
    boolean b33 = server24.connect(iP32);
    java.lang.String str34 = server24.toString();
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server35.update();
    tp2.IP iP39 = null;
    boolean b40 = server35.removeException(iP39);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server35.setTime(iTime43);
    long long45 = server35.getLastUpdate();
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server46.update();
    java.lang.String str50 = server46.toString();
    tp2.IP iP51 = null;
    boolean b52 = server46.removeBan(iP51);
    tp2.Server server53 = new tp2.Server();
    java.lang.String str54 = server53.toString();
    tp2.ITime iTime55 = server53.getTime();
    server53.update();
    tp2.IP iP57 = null;
    boolean b58 = server53.removeException(iP57);
    tp2.Server server59 = new tp2.Server();
    java.lang.String str60 = server59.toString();
    tp2.ITime iTime61 = server59.getTime();
    server53.setTime(iTime61);
    tp2.ITime iTime63 = server53.getTime();
    tp2.Server server64 = new tp2.Server();
    java.lang.String str65 = server64.toString();
    tp2.ITime iTime66 = server64.getTime();
    server64.update();
    tp2.IP iP68 = null;
    boolean b69 = server64.removeException(iP68);
    tp2.Server server70 = new tp2.Server();
    java.lang.String str71 = server70.toString();
    tp2.ITime iTime72 = server70.getTime();
    server64.setTime(iTime72);
    server53.setTime(iTime72);
    server46.setTime(iTime72);
    server35.setTime(iTime72);
    tp2.ITime iTime77 = server35.getTime();
    server24.setTime(iTime77);
    server0.setTime(iTime77);
    java.lang.String str80 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465424052268, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465424052268, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424052268L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=1465424052269, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=1465424052269, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424052269, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424052269, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 1465424052270L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465424052271, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465424052271, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=1465424052269, exceptions=(), bans={}]"+ "'", str80.equals("Server [lastUpdate=1465424052269, exceptions=(), bans={}]"));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test062"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server6.update();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    tp2.IP iP14 = null;
    boolean b15 = server10.removeException(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server10.setTime(iTime18);
    server6.setTime(iTime18);
    server0.setTime(iTime18);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test063"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    boolean b11 = server0.repOK();
    server0.update();
    long long13 = server0.getLastUpdate();
    java.lang.String str14 = server0.toString();
    boolean b15 = server0.repOK();
    server0.update();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.IP iP21 = null;
    boolean b22 = server17.removeException(iP21);
    boolean b23 = server17.repOK();
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server17.setTime(iTime32);
    java.lang.String str35 = server17.toString();
    long long36 = server17.getLastUpdate();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    tp2.ITime iTime42 = server37.getTime();
    tp2.IP iP43 = null;
    boolean b44 = server37.removeException(iP43);
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.ITime iTime47 = server45.getTime();
    server45.update();
    java.lang.String str49 = server45.toString();
    long long50 = server45.getLastUpdate();
    long long51 = server45.getLastUpdate();
    tp2.Server server52 = new tp2.Server();
    java.lang.String str53 = server52.toString();
    tp2.ITime iTime54 = server52.getTime();
    tp2.IP iP55 = null;
    boolean b56 = server52.addBan(iP55);
    tp2.ITime iTime57 = server52.getTime();
    server45.setTime(iTime57);
    server37.setTime(iTime57);
    server17.setTime(iTime57);
    server0.setTime(iTime57);
    tp2.IP iP62 = null;
    boolean b63 = server0.removeBan(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424052327L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052327, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424052327, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=1465424052327, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=1465424052327, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424052327L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424052328, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424052328, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465424052329, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=1465424052329, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1465424052329L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 1465424052329L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test064"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    long long30 = server0.getLastUpdate();
    long long31 = server0.getLastUpdate();
    java.lang.String str32 = server0.toString();
    long long33 = server0.getLastUpdate();
    java.lang.String str34 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052347, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052347, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 1465424052347L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1465424052347L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=1465424052347, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=1465424052347, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 1465424052347L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424052347, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424052347, exceptions=(), bans={}]"));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test065"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    long long11 = server0.getLastUpdate();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server12.setTime(iTime20);
    long long22 = server12.getLastUpdate();
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    java.lang.String str27 = server23.toString();
    tp2.IP iP28 = null;
    boolean b29 = server23.removeBan(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    tp2.IP iP34 = null;
    boolean b35 = server30.removeException(iP34);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server30.setTime(iTime38);
    tp2.ITime iTime40 = server30.getTime();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    tp2.IP iP45 = null;
    boolean b46 = server41.removeException(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server41.setTime(iTime49);
    server30.setTime(iTime49);
    server23.setTime(iTime49);
    server12.setTime(iTime49);
    server0.setTime(iTime49);
    tp2.IP iP55 = null;
    boolean b56 = server0.addBan(iP55);
    boolean b57 = server0.repOK();
    tp2.IP iP58 = null;
    boolean b59 = server0.removeException(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052358L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424052358L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424052359, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=1465424052359, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test066"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.IP iP19 = null;
    boolean b20 = server15.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server15.setTime(iTime23);
    server11.setTime(iTime23);
    tp2.IP iP26 = null;
    boolean b27 = server11.removeBan(iP26);
    tp2.ITime iTime28 = server11.getTime();
    tp2.IP iP29 = null;
    boolean b30 = server11.removeException(iP29);
    tp2.IP iP31 = null;
    boolean b32 = server11.removeBan(iP31);
    tp2.ITime iTime33 = server11.getTime();
    server0.setTime(iTime33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server35.update();
    tp2.IP iP39 = null;
    boolean b40 = server35.removeException(iP39);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server35.setTime(iTime43);
    tp2.ITime iTime45 = server35.getTime();
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server46.update();
    tp2.IP iP50 = null;
    boolean b51 = server46.removeException(iP50);
    tp2.Server server52 = new tp2.Server();
    java.lang.String str53 = server52.toString();
    tp2.ITime iTime54 = server52.getTime();
    server46.setTime(iTime54);
    server35.setTime(iTime54);
    server0.setTime(iTime54);
    tp2.ITime iTime58 = null;
    server0.setTime(iTime58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052379, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052379, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424052379, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465424052379, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime54);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test067"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test068"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.addBan(iP9);
    server0.update();
    long long12 = server0.getLastUpdate();
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server13.update();
    tp2.IP iP17 = null;
    boolean b18 = server13.removeException(iP17);
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server13.setTime(iTime21);
    server13.update();
    tp2.ITime iTime24 = server13.getTime();
    server0.setTime(iTime24);
    boolean b26 = server0.repOK();
    tp2.IP iP27 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b28 = server0.removeBan(iP27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424052410L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test069"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    boolean b9 = server0.repOK();
    boolean b10 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052413, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052413, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052413L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test070"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.connect(iP2);
    boolean b4 = server0.repOK();
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test071"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.IP iP17 = null;
    boolean b18 = server0.connect(iP17);
    server0.update();
    tp2.IP iP20 = null;
    boolean b21 = server0.removeException(iP20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    java.lang.String str26 = server22.toString();
    long long27 = server22.getLastUpdate();
    long long28 = server22.getLastUpdate();
    tp2.IP iP29 = null;
    boolean b30 = server22.removeException(iP29);
    java.lang.String str31 = server22.toString();
    tp2.IP iP32 = null;
    boolean b33 = server22.addBan(iP32);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    tp2.IP iP36 = null;
    boolean b37 = server34.removeException(iP36);
    tp2.ITime iTime38 = server34.getTime();
    server22.setTime(iTime38);
    java.lang.String str40 = server22.toString();
    server22.update();
    java.lang.String str42 = server22.toString();
    boolean b43 = server22.repOK();
    tp2.ITime iTime44 = server22.getTime();
    server0.setTime(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424052416, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424052416, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1465424052416L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1465424052416L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=1465424052416, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=1465424052416, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424052416, exceptions=(), bans={[IPBan [ip=null, expires=1465424112416]]}]"+ "'", str40.equals("Server [lastUpdate=1465424052416, exceptions=(), bans={[IPBan [ip=null, expires=1465424112416]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=1465424052416, exceptions=(), bans={[IPBan [ip=null, expires=1465424112416]]}]"+ "'", str42.equals("Server [lastUpdate=1465424052416, exceptions=(), bans={[IPBan [ip=null, expires=1465424112416]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test072"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    tp2.ITime iTime13 = server0.getTime();
    tp2.IP iP14 = null;
    boolean b15 = server0.addBan(iP14);
    tp2.IP iP16 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = server0.removeBan(iP16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052426, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052426, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052426L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test073"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.addBan(iP22);
    java.lang.String str24 = server0.toString();
    java.lang.String str25 = server0.toString();
    long long26 = server0.getLastUpdate();
    tp2.Server server27 = new tp2.Server();
    server27.update();
    long long29 = server27.getLastUpdate();
    java.lang.String str30 = server27.toString();
    long long31 = server27.getLastUpdate();
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.ITime iTime34 = server32.getTime();
    server32.update();
    tp2.IP iP36 = null;
    boolean b37 = server32.removeException(iP36);
    boolean b38 = server32.repOK();
    tp2.IP iP39 = null;
    boolean b40 = server32.removeException(iP39);
    tp2.IP iP41 = null;
    boolean b42 = server32.connect(iP41);
    long long43 = server32.getLastUpdate();
    tp2.ITime iTime44 = server32.getTime();
    tp2.ITime iTime45 = server32.getTime();
    long long46 = server32.getLastUpdate();
    server32.update();
    tp2.ITime iTime48 = server32.getTime();
    server27.setTime(iTime48);
    server0.setTime(iTime48);
    tp2.IP iP51 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b52 = server0.addBan(iP51);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424052427, exceptions=(), bans={[IPBan [ip=null, expires=1465424112427]]}]"+ "'", str24.equals("Server [lastUpdate=1465424052427, exceptions=(), bans={[IPBan [ip=null, expires=1465424112427]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424052427, exceptions=(), bans={[IPBan [ip=null, expires=1465424112427]]}]"+ "'", str25.equals("Server [lastUpdate=1465424052427, exceptions=(), bans={[IPBan [ip=null, expires=1465424112427]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424052427L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424052428L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=1465424052428, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=1465424052428, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1465424052428L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 1465424052428L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long46 == 1465424052428L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test074"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.addBan(iP14);
    tp2.IP iP16 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = server0.removeBan(iP16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424052429L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test075"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    server0.update();
    tp2.IP iP14 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = server0.addBan(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test076"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.ITime iTime11 = server0.getTime();
    tp2.ITime iTime12 = server0.getTime();
    tp2.ITime iTime13 = server0.getTime();
    tp2.IP iP14 = null;
    boolean b15 = server0.removeBan(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052432, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052432, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052432L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052433L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test077"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    tp2.ITime iTime8 = server0.getTime();
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    long long11 = server0.getLastUpdate();
    boolean b12 = server0.repOK();
    boolean b13 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112436]]}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112436]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test078"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    boolean b4 = server0.repOK();
    tp2.IP iP5 = null;
    boolean b6 = server0.addBan(iP5);
    server0.update();
    boolean b8 = server0.repOK();
    java.lang.String str9 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424052438, exceptions=(), bans={[IPBan [ip=null, expires=1465424112437]]}]"+ "'", str9.equals("Server [lastUpdate=1465424052438, exceptions=(), bans={[IPBan [ip=null, expires=1465424112437]]}]"));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test079"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    boolean b2 = server0.repOK();
    tp2.IP iP3 = null;
    boolean b4 = server0.removeBan(iP3);
    boolean b5 = server0.repOK();
    tp2.ITime iTime6 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test080"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.IP iP30 = null;
    boolean b31 = server0.removeBan(iP30);
    long long32 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052439, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052439, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1465424052439L);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test081"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    long long22 = server0.getLastUpdate();
    boolean b23 = server0.repOK();
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    tp2.IP iP36 = null;
    boolean b37 = server24.removeException(iP36);
    java.lang.String str38 = server24.toString();
    tp2.Server server39 = new tp2.Server();
    java.lang.String str40 = server39.toString();
    tp2.ITime iTime41 = server39.getTime();
    server39.update();
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server43.update();
    tp2.IP iP47 = null;
    boolean b48 = server43.removeException(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server43.setTime(iTime51);
    server39.setTime(iTime51);
    tp2.IP iP54 = null;
    boolean b55 = server39.removeBan(iP54);
    tp2.ITime iTime56 = server39.getTime();
    server24.setTime(iTime56);
    server24.update();
    boolean b59 = server24.repOK();
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    tp2.ITime iTime62 = server60.getTime();
    server60.update();
    tp2.IP iP64 = null;
    boolean b65 = server60.removeException(iP64);
    boolean b66 = server60.repOK();
    tp2.IP iP67 = null;
    boolean b68 = server60.removeException(iP67);
    tp2.IP iP69 = null;
    boolean b70 = server60.connect(iP69);
    tp2.ITime iTime71 = server60.getTime();
    tp2.ITime iTime72 = server60.getTime();
    server24.setTime(iTime72);
    tp2.ITime iTime74 = server24.getTime();
    server0.setTime(iTime74);
    tp2.IP iP76 = null;
    boolean b77 = server0.addBan(iP76);
    long long78 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424052451L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=1465424052452, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=1465424052452, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long78 == 1465424052451L);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test082"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    tp2.ITime iTime28 = server18.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server18.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    java.lang.String str42 = server0.toString();
    tp2.IP iP43 = null;
    boolean b44 = server0.removeBan(iP43);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424052499L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424052499, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424052499, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=1465424052499, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=1465424052499, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test083"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.connect(iP13);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052515, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052515, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052515L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test084"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test085"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    long long11 = server0.getLastUpdate();
    java.lang.String str12 = server0.toString();
    boolean b13 = server0.repOK();
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test086"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server6.update();
    java.lang.String str10 = server6.toString();
    long long11 = server6.getLastUpdate();
    long long12 = server6.getLastUpdate();
    tp2.IP iP13 = null;
    boolean b14 = server6.removeException(iP13);
    java.lang.String str15 = server6.toString();
    tp2.IP iP16 = null;
    boolean b17 = server6.addBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server18.addBan(iP21);
    tp2.ITime iTime23 = server18.getTime();
    server6.setTime(iTime23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server25.update();
    tp2.ITime iTime36 = server25.getTime();
    tp2.ITime iTime37 = server25.getTime();
    server6.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.IP iP40 = null;
    boolean b41 = server0.removeBan(iP40);
    tp2.ITime iTime42 = server0.getTime();
    tp2.IP iP43 = null;
    boolean b44 = server0.removeException(iP43);
    tp2.IP iP45 = null;
    boolean b46 = server0.removeException(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052521, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052521, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052521L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424052521, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424052521, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052521L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424052521L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424052521, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424052521, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test087"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    tp2.IP iP17 = null;
    boolean b18 = server10.connect(iP17);
    tp2.ITime iTime19 = server10.getTime();
    server0.setTime(iTime19);
    tp2.IP iP21 = null;
    boolean b22 = server0.addBan(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052536, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052536, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424052536, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465424052536, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424052536, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424052536, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052537, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424052537, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424052537L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test088"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    long long11 = server0.getLastUpdate();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    long long19 = server16.getLastUpdate();
    boolean b20 = server16.repOK();
    boolean b21 = server16.repOK();
    boolean b22 = server16.repOK();
    boolean b23 = server16.repOK();
    tp2.ITime iTime24 = server16.getTime();
    server0.setTime(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052543L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test089"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    tp2.ITime iTime10 = server0.getTime();
    server0.update();
    java.lang.String str12 = server0.toString();
    tp2.IP iP13 = null;
    boolean b14 = server0.addBan(iP13);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    java.lang.String str19 = server15.toString();
    long long20 = server15.getLastUpdate();
    server15.update();
    tp2.IP iP22 = null;
    boolean b23 = server15.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    java.lang.String str28 = server24.toString();
    long long29 = server24.getLastUpdate();
    tp2.ITime iTime30 = server24.getTime();
    tp2.ITime iTime31 = server24.getTime();
    tp2.ITime iTime32 = server24.getTime();
    server15.setTime(iTime32);
    server0.setTime(iTime32);
    tp2.IP iP35 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b36 = server0.addException(iP35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052549, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052549, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052549L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424052549, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424052549, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=1465424052549, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=1465424052549, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1465424052549L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=1465424052550, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=1465424052550, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424052550L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test090"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    java.lang.String str7 = server0.toString();
    // The following exception was thrown during execution in test generation
    try {
      server0.update();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test091"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = server0.getTime();
    tp2.ITime iTime8 = server0.getTime();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test092"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    tp2.IP iP20 = null;
    boolean b21 = server0.removeBan(iP20);
    tp2.IP iP22 = null;
    boolean b23 = server0.removeBan(iP22);
    boolean b24 = server0.repOK();
    long long25 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424052552L);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test093"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    java.lang.String str10 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112557]]}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112557]]}]"));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test094"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeBan(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.IP iP20 = null;
    boolean b21 = server16.removeException(iP20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server16.setTime(iTime24);
    tp2.ITime iTime26 = server16.getTime();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server16.setTime(iTime35);
    server9.setTime(iTime35);
    server0.setTime(iTime35);
    java.lang.String str40 = server0.toString();
    tp2.ITime iTime41 = server0.getTime();
    tp2.IP iP42 = null;
    boolean b43 = server0.removeException(iP42);
    tp2.IP iP44 = null;
    boolean b45 = server0.removeException(iP44);
    tp2.IP iP46 = null;
    boolean b47 = server0.connect(iP46);
    tp2.IP iP48 = null;
    boolean b49 = server0.removeException(iP48);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052558, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424052558, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424052558, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424052558, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test095"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.addBan(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test096"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    tp2.IP iP37 = null;
    boolean b38 = server0.removeException(iP37);
    tp2.IP iP39 = null;
    boolean b40 = server0.removeBan(iP39);
    java.lang.String str41 = server0.toString();
    java.lang.String str42 = server0.toString();
    tp2.IP iP43 = null;
    boolean b44 = server0.addBan(iP43);
    tp2.IP iP45 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b46 = server0.addBan(iP45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424052576, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424052576, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=1465424052576, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=1465424052576, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test097"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.addBan(iP5);
    java.lang.String str7 = server0.toString();
    tp2.ITime iTime8 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112578]]}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112578]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test098"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server0.setTime(iTime13);
    server0.update();
    server0.update();
    tp2.ITime iTime17 = server0.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052579, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052579, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052579L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424052579L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test099"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    boolean b6 = server0.repOK();
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    long long11 = server0.getLastUpdate();
    tp2.ITime iTime12 = server0.getTime();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052581L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424052581, exceptions=(), bans={[IPBan [ip=null, expires=1465424112581]]}]"+ "'", str8.equals("Server [lastUpdate=1465424052581, exceptions=(), bans={[IPBan [ip=null, expires=1465424112581]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052581L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test100"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    server0.update();
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    server0.update();
    boolean b19 = server0.repOK();
    tp2.IP iP20 = null;
    boolean b21 = server0.connect(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test101"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    java.lang.String str8 = server0.toString();
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    boolean b12 = server0.repOK();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeException(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test102"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    server0.update();
    server0.update();
    tp2.ITime iTime7 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052585, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052585, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test103"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeBan(iP12);
    tp2.ITime iTime14 = server7.getTime();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.IP iP19 = null;
    boolean b20 = server15.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server15.setTime(iTime23);
    tp2.ITime iTime25 = server15.getTime();
    server7.setTime(iTime25);
    server0.setTime(iTime25);
    tp2.IP iP28 = null;
    boolean b29 = server0.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    tp2.IP iP34 = null;
    boolean b35 = server30.removeException(iP34);
    boolean b36 = server30.repOK();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    tp2.IP iP41 = null;
    boolean b42 = server37.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server37.setTime(iTime45);
    server30.setTime(iTime45);
    server0.setTime(iTime45);
    tp2.IP iP49 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b50 = server0.addBan(iP49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052586, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052586, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052586L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052587, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052587, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test104"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    long long2 = server0.getLastUpdate();
    long long3 = server0.getLastUpdate();
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeBan(iP6);
    boolean b8 = server0.repOK();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1465424052588L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 1465424052588L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test105"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    boolean b9 = server0.repOK();
    long long10 = server0.getLastUpdate();
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeException(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052588, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052588, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052588L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424052588L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052588, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052588, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424052588, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424052588, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test106"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b10 = server0.addException(iP9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=1465424052590, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=1465424052590, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test107"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server0.setTime(iTime13);
    server0.update();
    server0.update();
    tp2.ITime iTime17 = server0.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    java.lang.String str22 = server18.toString();
    long long23 = server18.getLastUpdate();
    long long24 = server18.getLastUpdate();
    tp2.IP iP25 = null;
    boolean b26 = server18.removeException(iP25);
    tp2.ITime iTime27 = server18.getTime();
    tp2.IP iP28 = null;
    boolean b29 = server18.removeBan(iP28);
    java.lang.String str30 = server18.toString();
    tp2.IP iP31 = null;
    boolean b32 = server18.removeBan(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    tp2.IP iP36 = null;
    boolean b37 = server33.addBan(iP36);
    tp2.IP iP38 = null;
    boolean b39 = server33.removeException(iP38);
    long long40 = server33.getLastUpdate();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.ITime iTime47 = server45.getTime();
    server45.update();
    tp2.IP iP49 = null;
    boolean b50 = server45.removeException(iP49);
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    tp2.ITime iTime53 = server51.getTime();
    server45.setTime(iTime53);
    server41.setTime(iTime53);
    server33.setTime(iTime53);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.IP iP59 = null;
    boolean b60 = server57.removeException(iP59);
    tp2.ITime iTime61 = server57.getTime();
    server33.setTime(iTime61);
    tp2.ITime iTime63 = server33.getTime();
    server18.setTime(iTime63);
    server0.setTime(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052590, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052590, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052590L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424052590L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424052591, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424052591, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1465424052591L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424052591L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=1465424052591, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=1465424052591, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test108"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052614, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052614, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052614L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test109"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    server0.update();
    server0.update();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.addBan(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052616, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052616, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=1465424052616, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=1465424052616, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test110"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    server0.update();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    tp2.IP iP15 = null;
    boolean b16 = server12.addBan(iP15);
    tp2.ITime iTime17 = server12.getTime();
    tp2.ITime iTime18 = server12.getTime();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    tp2.ITime iTime26 = server19.getTime();
    tp2.IP iP27 = null;
    boolean b28 = server19.addBan(iP27);
    tp2.ITime iTime29 = server19.getTime();
    server12.setTime(iTime29);
    boolean b31 = server12.repOK();
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.ITime iTime34 = server32.getTime();
    server32.update();
    java.lang.String str36 = server32.toString();
    long long37 = server32.getLastUpdate();
    boolean b38 = server32.repOK();
    tp2.IP iP39 = null;
    boolean b40 = server32.removeException(iP39);
    boolean b41 = server32.repOK();
    long long42 = server32.getLastUpdate();
    boolean b43 = server32.repOK();
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    java.lang.String str48 = server44.toString();
    long long49 = server44.getLastUpdate();
    long long50 = server44.getLastUpdate();
    tp2.IP iP51 = null;
    boolean b52 = server44.removeException(iP51);
    tp2.ITime iTime53 = server44.getTime();
    server32.setTime(iTime53);
    server12.setTime(iTime53);
    server0.setTime(iTime53);
    boolean b57 = server0.repOK();
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    tp2.ITime iTime60 = server58.getTime();
    long long61 = server58.getLastUpdate();
    boolean b62 = server58.repOK();
    boolean b63 = server58.repOK();
    tp2.Server server64 = new tp2.Server();
    java.lang.String str65 = server64.toString();
    tp2.ITime iTime66 = server64.getTime();
    server64.update();
    tp2.IP iP68 = null;
    boolean b69 = server64.addBan(iP68);
    boolean b70 = server64.repOK();
    java.lang.String str71 = server64.toString();
    tp2.IP iP72 = null;
    boolean b73 = server64.removeException(iP72);
    tp2.ITime iTime74 = server64.getTime();
    server58.setTime(iTime74);
    server0.setTime(iTime74);
    tp2.IP iP77 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b78 = server0.addException(iP77);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424052617, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424052617, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424052617L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=1465424052618, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=1465424052618, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 1465424052618L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1465424052618L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465424052619, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=1465424052619, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1465424052619L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1465424052619L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long61 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=1465424052620, exceptions=(), bans={[IPBan [ip=null, expires=1465424112620]]}]"+ "'", str71.equals("Server [lastUpdate=1465424052620, exceptions=(), bans={[IPBan [ip=null, expires=1465424112620]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime74);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test111"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    server0.update();
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    boolean b12 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test112"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.ITime iTime16 = server0.getTime();
    boolean b17 = server0.repOK();
    java.lang.String str18 = server0.toString();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeException(iP19);
    tp2.IP iP21 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b22 = server0.addException(iP21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test113"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.addBan(iP7);
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b11 = server0.connect(iP10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052622, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052622, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052622L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424052622L);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test114"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server8.addBan(iP11);
    tp2.ITime iTime13 = server8.getTime();
    server0.setTime(iTime13);
    long long15 = server0.getLastUpdate();
    tp2.IP iP16 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = server0.addException(iP16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424052623L);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test115"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    boolean b16 = server0.repOK();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.IP iP19 = null;
    boolean b20 = server17.removeException(iP19);
    tp2.IP iP21 = null;
    boolean b22 = server17.connect(iP21);
    long long23 = server17.getLastUpdate();
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    java.lang.String str40 = server36.toString();
    long long41 = server36.getLastUpdate();
    tp2.ITime iTime42 = server36.getTime();
    server34.setTime(iTime42);
    server24.setTime(iTime42);
    server17.setTime(iTime42);
    server0.setTime(iTime42);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server47.update();
    java.lang.String str51 = server47.toString();
    tp2.IP iP52 = null;
    boolean b53 = server47.removeBan(iP52);
    tp2.Server server54 = new tp2.Server();
    java.lang.String str55 = server54.toString();
    tp2.ITime iTime56 = server54.getTime();
    server54.update();
    tp2.IP iP58 = null;
    boolean b59 = server54.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    tp2.ITime iTime62 = server60.getTime();
    server54.setTime(iTime62);
    tp2.ITime iTime64 = server54.getTime();
    tp2.Server server65 = new tp2.Server();
    java.lang.String str66 = server65.toString();
    tp2.ITime iTime67 = server65.getTime();
    server65.update();
    tp2.IP iP69 = null;
    boolean b70 = server65.removeException(iP69);
    tp2.Server server71 = new tp2.Server();
    java.lang.String str72 = server71.toString();
    tp2.ITime iTime73 = server71.getTime();
    server65.setTime(iTime73);
    server54.setTime(iTime73);
    server47.setTime(iTime73);
    long long77 = server47.getLastUpdate();
    long long78 = server47.getLastUpdate();
    java.lang.String str79 = server47.toString();
    tp2.Server server80 = new tp2.Server();
    java.lang.String str81 = server80.toString();
    tp2.IP iP82 = null;
    boolean b83 = server80.removeException(iP82);
    tp2.IP iP84 = null;
    boolean b85 = server80.connect(iP84);
    tp2.IP iP86 = null;
    boolean b87 = server80.addBan(iP86);
    server80.update();
    tp2.ITime iTime89 = server80.getTime();
    server47.setTime(iTime89);
    server0.setTime(iTime89);
    tp2.IP iP92 = null;
    boolean b93 = server0.removeException(iP92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424052625, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424052625, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424052625L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=1465424052625, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=1465424052625, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str72.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long77 == 1465424052625L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long78 == 1465424052625L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=1465424052625, exceptions=(), bans={}]"+ "'", str79.equals("Server [lastUpdate=1465424052625, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str81.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test116"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.IP iP30 = null;
    boolean b31 = server0.connect(iP30);
    tp2.IP iP32 = null;
    boolean b33 = server0.connect(iP32);
    tp2.IP iP34 = null;
    boolean b35 = server0.removeBan(iP34);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    tp2.IP iP40 = null;
    boolean b41 = server36.removeException(iP40);
    boolean b42 = server36.repOK();
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server43.update();
    tp2.IP iP47 = null;
    boolean b48 = server43.removeException(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server43.setTime(iTime51);
    server36.setTime(iTime51);
    server0.setTime(iTime51);
    tp2.IP iP55 = null;
    boolean b56 = server0.addBan(iP55);
    server0.update();
    tp2.IP iP58 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b59 = server0.addBan(iP58);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052656, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052656, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test117"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    server0.update();
    long long12 = server0.getLastUpdate();
    tp2.IP iP13 = null;
    boolean b14 = server0.connect(iP13);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424052658L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test118"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test119"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052662, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052662, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test120"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    java.lang.String str8 = server0.toString();
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test121"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.ITime iTime9 = server0.getTime();
    server0.update();
    java.lang.String str11 = server0.toString();
    java.lang.String str12 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052664, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052664, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052664L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424052664L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052664, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052664, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424052664, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424052664, exceptions=(), bans={}]"));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test122"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    java.lang.String str11 = server0.toString();
    tp2.IP iP12 = null;
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.IP iP18 = null;
    boolean b19 = server14.removeException(iP18);
    boolean b20 = server14.repOK();
    tp2.IP iP21 = null;
    boolean b22 = server14.connect(iP21);
    tp2.IP iP23 = null;
    boolean b24 = server14.addBan(iP23);
    server14.update();
    tp2.ITime iTime26 = server14.getTime();
    tp2.Server server27 = new tp2.Server();
    tp2.ITime iTime28 = null;
    server27.setTime(iTime28);
    tp2.IP iP30 = null;
    boolean b31 = server27.removeException(iP30);
    tp2.IP iP32 = null;
    boolean b33 = server27.connect(iP32);
    tp2.IP iP34 = null;
    boolean b35 = server27.connect(iP34);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.IP iP38 = null;
    boolean b39 = server36.removeException(iP38);
    tp2.ITime iTime40 = server36.getTime();
    server27.setTime(iTime40);
    tp2.ITime iTime42 = server27.getTime();
    boolean b43 = server27.repOK();
    tp2.IP iP44 = null;
    boolean b45 = server27.addBan(iP44);
    tp2.ITime iTime46 = server27.getTime();
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server47.update();
    tp2.IP iP51 = null;
    boolean b52 = server47.removeException(iP51);
    boolean b53 = server47.repOK();
    tp2.IP iP54 = null;
    boolean b55 = server47.connect(iP54);
    long long56 = server47.getLastUpdate();
    tp2.ITime iTime57 = server47.getTime();
    server27.setTime(iTime57);
    server14.setTime(iTime57);
    server0.setTime(iTime57);
    tp2.IP iP61 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b62 = server0.addException(iP61);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052665, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052665, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1465424052667L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test123"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    long long9 = server0.getLastUpdate();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    boolean b13 = server0.repOK();
    tp2.IP iP14 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = server0.addException(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424052668L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test124"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    tp2.IP iP37 = null;
    boolean b38 = server0.removeBan(iP37);
    tp2.IP iP39 = null;
    boolean b40 = server0.removeException(iP39);
    long long41 = server0.getLastUpdate();
    tp2.ITime iTime42 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424052668L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test125"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    long long35 = server30.getLastUpdate();
    long long36 = server30.getLastUpdate();
    tp2.IP iP37 = null;
    boolean b38 = server30.removeException(iP37);
    java.lang.String str39 = server30.toString();
    tp2.IP iP40 = null;
    boolean b41 = server30.addBan(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.IP iP44 = null;
    boolean b45 = server42.removeException(iP44);
    tp2.ITime iTime46 = server42.getTime();
    server30.setTime(iTime46);
    server0.setTime(iTime46);
    tp2.ITime iTime49 = server0.getTime();
    tp2.IP iP50 = null;
    boolean b51 = server0.removeException(iP50);
    long long52 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052679, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052679, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424052681, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424052681, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424052681L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424052681L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424052681, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424052681, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long52 == 1465424052679L);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test126"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    server0.update();
    tp2.IP iP21 = null;
    boolean b22 = server0.removeBan(iP21);
    tp2.ITime iTime23 = server0.getTime();
    tp2.IP iP24 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b25 = server0.addException(iP24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test127"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    boolean b16 = server0.repOK();
    boolean b17 = server0.repOK();
    server0.update();
    java.lang.String str19 = server0.toString();
    tp2.ITime iTime20 = server0.getTime();
    java.lang.String str21 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=1465424052693, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=1465424052693, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424052693, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424052693, exceptions=(), bans={}]"));

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test128"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    server0.update();
    long long12 = server0.getLastUpdate();
    boolean b13 = server0.repOK();
    boolean b14 = server0.repOK();
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424052695L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test129"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.ITime iTime9 = server0.getTime();
    java.lang.String str10 = server0.toString();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    boolean b13 = server0.repOK();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    java.lang.String str18 = server14.toString();
    long long19 = server14.getLastUpdate();
    long long20 = server14.getLastUpdate();
    server14.update();
    boolean b22 = server14.repOK();
    tp2.ITime iTime23 = server14.getTime();
    tp2.ITime iTime24 = server14.getTime();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    java.lang.String str29 = server25.toString();
    tp2.IP iP30 = null;
    boolean b31 = server25.removeBan(iP30);
    tp2.ITime iTime32 = server25.getTime();
    tp2.ITime iTime33 = server25.getTime();
    tp2.IP iP34 = null;
    boolean b35 = server25.removeException(iP34);
    tp2.ITime iTime36 = server25.getTime();
    server14.setTime(iTime36);
    server0.setTime(iTime36);
    tp2.IP iP39 = null;
    boolean b40 = server0.connect(iP39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052695, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052695, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052695L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424052696, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424052696, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465424052696, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465424052696, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1465424052696L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1465424052696L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=1465424052696, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=1465424052696, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test130"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    long long6 = server0.getLastUpdate();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    java.lang.String str12 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test131"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.IP iP20 = null;
    boolean b21 = server16.removeException(iP20);
    boolean b22 = server16.repOK();
    tp2.IP iP23 = null;
    boolean b24 = server16.removeException(iP23);
    tp2.IP iP25 = null;
    boolean b26 = server16.connect(iP25);
    long long27 = server16.getLastUpdate();
    tp2.ITime iTime28 = server16.getTime();
    server0.setTime(iTime28);
    server0.update();
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server31.update();
    tp2.IP iP35 = null;
    boolean b36 = server31.removeException(iP35);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server31.setTime(iTime39);
    tp2.ITime iTime41 = server31.getTime();
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.ITime iTime44 = server42.getTime();
    server42.update();
    tp2.IP iP46 = null;
    boolean b47 = server42.removeException(iP46);
    tp2.Server server48 = new tp2.Server();
    java.lang.String str49 = server48.toString();
    tp2.ITime iTime50 = server48.getTime();
    server42.setTime(iTime50);
    server31.setTime(iTime50);
    tp2.IP iP53 = null;
    boolean b54 = server31.connect(iP53);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    tp2.ITime iTime57 = server55.getTime();
    server55.update();
    tp2.IP iP59 = null;
    boolean b60 = server55.removeException(iP59);
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    tp2.ITime iTime63 = server61.getTime();
    server55.setTime(iTime63);
    server55.update();
    tp2.ITime iTime66 = server55.getTime();
    server31.setTime(iTime66);
    tp2.IP iP68 = null;
    boolean b69 = server31.removeBan(iP68);
    tp2.ITime iTime70 = server31.getTime();
    server0.setTime(iTime70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1465424052704L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime70);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test132"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    long long8 = server0.getLastUpdate();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    tp2.IP iP13 = null;
    boolean b14 = server9.removeException(iP13);
    boolean b15 = server9.repOK();
    tp2.IP iP16 = null;
    boolean b17 = server9.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    java.lang.String str22 = server18.toString();
    tp2.IP iP23 = null;
    boolean b24 = server18.removeBan(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    tp2.ITime iTime35 = server25.getTime();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    tp2.IP iP40 = null;
    boolean b41 = server36.removeException(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.ITime iTime44 = server42.getTime();
    server36.setTime(iTime44);
    server25.setTime(iTime44);
    server18.setTime(iTime44);
    server9.setTime(iTime44);
    java.lang.String str49 = server9.toString();
    tp2.ITime iTime50 = server9.getTime();
    server0.setTime(iTime50);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052727, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052727, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052727L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424052727L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424052728, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424052728, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465424052728, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=1465424052728, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test133"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    java.lang.String str22 = server0.toString();
    tp2.IP iP23 = null;
    boolean b24 = server0.connect(iP23);
    java.lang.String str25 = server0.toString();
    tp2.ITime iTime26 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424052744, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424052744, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424052744, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=1465424052744, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test134"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.addBan(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    java.lang.String str13 = server0.toString();
    tp2.ITime iTime14 = server0.getTime();
    long long15 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052754, exceptions=(), bans={[IPBan [ip=null, expires=1465424112754]]}]"+ "'", str13.equals("Server [lastUpdate=1465424052754, exceptions=(), bans={[IPBan [ip=null, expires=1465424112754]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424052754L);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test135"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    server0.update();
    boolean b8 = server0.repOK();
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    tp2.IP iP15 = null;
    boolean b16 = server12.addBan(iP15);
    tp2.ITime iTime17 = server12.getTime();
    tp2.ITime iTime18 = server12.getTime();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    tp2.ITime iTime26 = server19.getTime();
    tp2.IP iP27 = null;
    boolean b28 = server19.addBan(iP27);
    tp2.ITime iTime29 = server19.getTime();
    server12.setTime(iTime29);
    server0.setTime(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052755, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052755, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052755L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424052755L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424052756, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424052756, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424052756L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test136"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    boolean b9 = server0.repOK();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    long long12 = server0.getLastUpdate();
    boolean b13 = server0.repOK();
    long long14 = server0.getLastUpdate();
    tp2.IP iP15 = null;
    boolean b16 = server0.connect(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052769, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052769, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052769L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424052769L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424052769L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test137"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    boolean b5 = server0.repOK();
    tp2.ITime iTime6 = server0.getTime();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test138"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.addBan(iP9);
    long long11 = server0.getLastUpdate();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052772L);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test139"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.addBan(iP6);
    tp2.ITime iTime8 = server0.getTime();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    java.lang.String str11 = server0.toString();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server12.setTime(iTime20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    java.lang.String str28 = server24.toString();
    long long29 = server24.getLastUpdate();
    tp2.ITime iTime30 = server24.getTime();
    server22.setTime(iTime30);
    server12.setTime(iTime30);
    server0.setTime(iTime30);
    tp2.ITime iTime34 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112774]]}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424112774]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=1465424052775, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=1465424052775, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424052775L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test140"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    java.lang.String str18 = server0.toString();
    boolean b19 = server0.repOK();
    java.lang.String str20 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465424052784, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465424052784, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=1465424052784, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=1465424052784, exceptions=(), bans={}]"));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test141"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    java.lang.String str12 = server8.toString();
    long long13 = server8.getLastUpdate();
    tp2.ITime iTime14 = server8.getTime();
    boolean b15 = server8.repOK();
    tp2.ITime iTime16 = server8.getTime();
    server8.update();
    tp2.ITime iTime18 = server8.getTime();
    server0.setTime(iTime18);
    long long20 = server0.getLastUpdate();
    long long21 = server0.getLastUpdate();
    java.lang.String str22 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052788, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052788, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424052788, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424052788, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424052788L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1465424052788L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424052788L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424052788, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424052788, exceptions=(), bans={}]"));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test142"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    long long9 = server0.getLastUpdate();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    tp2.IP iP13 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = server0.removeBan(iP13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424052796L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test143"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    tp2.IP iP23 = null;
    boolean b24 = server19.removeException(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server19.setTime(iTime27);
    server15.setTime(iTime27);
    tp2.IP iP30 = null;
    boolean b31 = server15.removeBan(iP30);
    tp2.ITime iTime32 = server15.getTime();
    server0.setTime(iTime32);
    server0.update();
    boolean b35 = server0.repOK();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    tp2.IP iP40 = null;
    boolean b41 = server36.removeException(iP40);
    boolean b42 = server36.repOK();
    tp2.IP iP43 = null;
    boolean b44 = server36.removeException(iP43);
    tp2.IP iP45 = null;
    boolean b46 = server36.connect(iP45);
    tp2.ITime iTime47 = server36.getTime();
    tp2.ITime iTime48 = server36.getTime();
    server0.setTime(iTime48);
    tp2.ITime iTime50 = server0.getTime();
    tp2.IP iP51 = null;
    boolean b52 = server0.addBan(iP51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052797, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424052797, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test144"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    boolean b9 = server0.repOK();
    long long10 = server0.getLastUpdate();
    boolean b11 = server0.repOK();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    java.lang.String str16 = server12.toString();
    long long17 = server12.getLastUpdate();
    long long18 = server12.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server12.removeException(iP19);
    tp2.ITime iTime21 = server12.getTime();
    server0.setTime(iTime21);
    java.lang.String str23 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052833, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052833, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052833L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424052833L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465424052834, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465424052834, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424052834L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424052834L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424052833, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424052833, exceptions=(), bans={}]"));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test145"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    server0.update();
    long long14 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052836, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052836, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052836L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424052836L);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test146"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    boolean b3 = server0.repOK();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.addBan(iP8);
    boolean b10 = server4.repOK();
    long long11 = server4.getLastUpdate();
    tp2.Server server12 = new tp2.Server();
    tp2.ITime iTime13 = null;
    server12.setTime(iTime13);
    boolean b15 = server12.repOK();
    boolean b16 = server12.repOK();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    java.lang.String str21 = server17.toString();
    long long22 = server17.getLastUpdate();
    long long23 = server17.getLastUpdate();
    tp2.IP iP24 = null;
    boolean b25 = server17.removeException(iP24);
    java.lang.String str26 = server17.toString();
    tp2.IP iP27 = null;
    boolean b28 = server17.addBan(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    tp2.IP iP32 = null;
    boolean b33 = server29.addBan(iP32);
    tp2.ITime iTime34 = server29.getTime();
    server17.setTime(iTime34);
    server12.setTime(iTime34);
    server4.setTime(iTime34);
    server0.setTime(iTime34);
    server0.update();
    tp2.IP iP40 = null;
    boolean b41 = server0.removeBan(iP40);
    tp2.IP iP42 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b43 = server0.addException(iP42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424052837L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424052848, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424052848, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424052848L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1465424052848L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424052848, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424052848, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test147"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    boolean b4 = server0.repOK();
    long long5 = server0.getLastUpdate();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeBan(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test148"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    boolean b16 = server0.repOK();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    java.lang.String str21 = server17.toString();
    tp2.IP iP22 = null;
    boolean b23 = server17.removeBan(iP22);
    tp2.ITime iTime24 = server17.getTime();
    java.lang.String str25 = server17.toString();
    tp2.ITime iTime26 = server17.getTime();
    server0.setTime(iTime26);
    tp2.IP iP28 = null;
    boolean b29 = server0.removeException(iP28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424052850, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424052850, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424052850, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=1465424052850, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test149"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    tp2.IP iP13 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = server0.removeBan(iP13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test150"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    java.lang.String str11 = server0.toString();
    tp2.IP iP12 = null;
    boolean b13 = server0.addBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    java.lang.String str20 = server16.toString();
    long long21 = server16.getLastUpdate();
    tp2.ITime iTime22 = server16.getTime();
    server14.setTime(iTime22);
    server14.update();
    tp2.ITime iTime25 = server14.getTime();
    server0.setTime(iTime25);
    tp2.IP iP27 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b28 = server0.connect(iP27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424052856, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424052856, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=1465424052856, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=1465424052856, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424052856L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test151"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server11.update();
    tp2.ITime iTime22 = server11.getTime();
    server0.setTime(iTime22);
    tp2.ITime iTime24 = server0.getTime();
    tp2.IP iP25 = null;
    boolean b26 = server0.removeException(iP25);
    tp2.IP iP27 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b28 = server0.connect(iP27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test152"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    long long8 = server0.getLastUpdate();
    tp2.ITime iTime9 = server0.getTime();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server13.update();
    tp2.IP iP17 = null;
    boolean b18 = server13.removeException(iP17);
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server13.setTime(iTime21);
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    java.lang.String str29 = server25.toString();
    long long30 = server25.getLastUpdate();
    tp2.ITime iTime31 = server25.getTime();
    server23.setTime(iTime31);
    server13.setTime(iTime31);
    long long34 = server13.getLastUpdate();
    tp2.IP iP35 = null;
    boolean b36 = server13.removeBan(iP35);
    tp2.ITime iTime37 = server13.getTime();
    server0.setTime(iTime37);
    tp2.IP iP39 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b40 = server0.addException(iP39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052858, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052858, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424052858L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=1465424052860, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=1465424052860, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 1465424052860L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1465424052859L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test153"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    boolean b9 = server0.repOK();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    tp2.ITime iTime12 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052860, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052860, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052860L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test154"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    boolean b15 = server0.repOK();
    long long16 = server0.getLastUpdate();
    java.lang.String str17 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052862, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052862, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052862L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424052862L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=1465424052862, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=1465424052862, exceptions=(), bans={}]"));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test155"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server9.addBan(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server9.removeException(iP14);
    long long16 = server9.getLastUpdate();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.IP iP25 = null;
    boolean b26 = server21.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server21.setTime(iTime29);
    server17.setTime(iTime29);
    server9.setTime(iTime29);
    long long33 = server9.getLastUpdate();
    tp2.ITime iTime34 = server9.getTime();
    server0.setTime(iTime34);
    tp2.IP iP36 = null;
    boolean b37 = server0.connect(iP36);
    server0.update();
    server0.update();
    long long40 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052864, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052864, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052864L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052864L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1465424052866L);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test156"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server7.addBan(iP10);
    tp2.ITime iTime12 = server7.getTime();
    server0.setTime(iTime12);
    long long14 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052872, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052872, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052872L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424052872L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424052872L);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test157"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.addBan(iP6);
    tp2.ITime iTime8 = server0.getTime();
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b11 = server0.removeBan(iP10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test158"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    tp2.ITime iTime12 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424052874L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test159"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    long long35 = server30.getLastUpdate();
    long long36 = server30.getLastUpdate();
    tp2.IP iP37 = null;
    boolean b38 = server30.removeException(iP37);
    java.lang.String str39 = server30.toString();
    tp2.IP iP40 = null;
    boolean b41 = server30.addBan(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.IP iP44 = null;
    boolean b45 = server42.removeException(iP44);
    tp2.ITime iTime46 = server42.getTime();
    server30.setTime(iTime46);
    server0.setTime(iTime46);
    tp2.ITime iTime49 = server0.getTime();
    java.lang.String str50 = server0.toString();
    tp2.IP iP51 = null;
    boolean b52 = server0.connect(iP51);
    long long53 = server0.getLastUpdate();
    long long54 = server0.getLastUpdate();
    boolean b55 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052875, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052875, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424052876, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424052876, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424052876L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424052876L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424052876, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424052876, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465424052875, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465424052875, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long53 == 1465424052875L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 1465424052875L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test160"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    java.lang.String str10 = server0.toString();
    server0.update();
    tp2.IP iP12 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b13 = server0.addException(iP12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424052901, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424052901, exceptions=(), bans={}]"));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test161"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.Server server2 = new tp2.Server();
    java.lang.String str3 = server2.toString();
    tp2.ITime iTime4 = server2.getTime();
    server2.update();
    java.lang.String str6 = server2.toString();
    long long7 = server2.getLastUpdate();
    tp2.ITime iTime8 = server2.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeBan(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.addBan(iP14);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=1465424052903, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=1465424052903, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052903L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test162"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.connect(iP2);
    boolean b4 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test163"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server14.setTime(iTime26);
    tp2.IP iP29 = null;
    boolean b30 = server14.removeBan(iP29);
    tp2.ITime iTime31 = server14.getTime();
    tp2.IP iP32 = null;
    boolean b33 = server14.removeException(iP32);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    tp2.ITime iTime36 = server34.getTime();
    server34.update();
    java.lang.String str38 = server34.toString();
    tp2.IP iP39 = null;
    boolean b40 = server34.removeBan(iP39);
    long long41 = server34.getLastUpdate();
    tp2.IP iP42 = null;
    boolean b43 = server34.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    java.lang.String str48 = server44.toString();
    long long49 = server44.getLastUpdate();
    long long50 = server44.getLastUpdate();
    tp2.IP iP51 = null;
    boolean b52 = server44.removeException(iP51);
    java.lang.String str53 = server44.toString();
    boolean b54 = server44.repOK();
    tp2.IP iP55 = null;
    boolean b56 = server44.connect(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.ITime iTime59 = server57.getTime();
    server57.update();
    tp2.IP iP61 = null;
    boolean b62 = server57.addBan(iP61);
    tp2.ITime iTime63 = server57.getTime();
    server44.setTime(iTime63);
    server34.setTime(iTime63);
    server14.setTime(iTime63);
    server0.setTime(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=1465424052913, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=1465424052913, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424052913L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465424052914, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=1465424052914, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1465424052914L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1465424052914L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=1465424052914, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=1465424052914, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test164"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    boolean b15 = server0.repOK();
    server0.update();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    boolean b19 = server0.repOK();
    long long20 = server0.getLastUpdate();
    java.lang.String str21 = server0.toString();
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    tp2.IP iP25 = null;
    boolean b26 = server22.addBan(iP25);
    tp2.ITime iTime27 = server22.getTime();
    server0.setTime(iTime27);
    boolean b29 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1465424052929L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424052929, exceptions=(), bans={[IPBan [ip=null, expires=1465424112929]]}]"+ "'", str21.equals("Server [lastUpdate=1465424052929, exceptions=(), bans={[IPBan [ip=null, expires=1465424112929]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test165"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    tp2.ITime iTime28 = server18.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server18.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    java.lang.String str42 = server0.toString();
    boolean b43 = server0.repOK();
    java.lang.String str44 = server0.toString();
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.ITime iTime47 = server45.getTime();
    server45.update();
    tp2.IP iP49 = null;
    boolean b50 = server45.removeException(iP49);
    boolean b51 = server45.repOK();
    tp2.IP iP52 = null;
    boolean b53 = server45.removeException(iP52);
    tp2.IP iP54 = null;
    boolean b55 = server45.connect(iP54);
    java.lang.String str56 = server45.toString();
    tp2.IP iP57 = null;
    boolean b58 = server45.addBan(iP57);
    tp2.Server server59 = new tp2.Server();
    java.lang.String str60 = server59.toString();
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    tp2.ITime iTime63 = server61.getTime();
    server61.update();
    java.lang.String str65 = server61.toString();
    long long66 = server61.getLastUpdate();
    tp2.ITime iTime67 = server61.getTime();
    server59.setTime(iTime67);
    server59.update();
    tp2.ITime iTime70 = server59.getTime();
    server45.setTime(iTime70);
    server0.setTime(iTime70);
    tp2.IP iP73 = null;
    boolean b74 = server0.addBan(iP73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424052938L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424052938, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424052938, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=1465424052938, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=1465424052938, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=1465424052938, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=1465424052938, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=1465424052940, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=1465424052940, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str60.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=1465424052940, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=1465424052940, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 1465424052940L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test166"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.addBan(iP9);
    server0.update();
    long long12 = server0.getLastUpdate();
    server0.update();
    java.lang.String str14 = server0.toString();
    tp2.IP iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = server0.removeBan(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424052963L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052963, exceptions=(), bans={[IPBan [ip=null, expires=1465424112963]]}]"+ "'", str14.equals("Server [lastUpdate=1465424052963, exceptions=(), bans={[IPBan [ip=null, expires=1465424112963]]}]"));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test167"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.connect(iP13);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeException(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052964, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052964, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424052964L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test168"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    boolean b9 = server0.repOK();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = server0.addBan(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052965, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052965, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052965L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test169"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.ITime iTime9 = server0.getTime();
    java.lang.String str10 = server0.toString();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    boolean b13 = server0.repOK();
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    server0.update();
    boolean b17 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052965, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052965, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424052965L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424052965, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424052965, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test170"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.addBan(iP6);
    tp2.ITime iTime8 = server0.getTime();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    java.lang.String str13 = server9.toString();
    tp2.IP iP14 = null;
    boolean b15 = server9.removeBan(iP14);
    tp2.ITime iTime16 = server9.getTime();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.IP iP21 = null;
    boolean b22 = server17.removeException(iP21);
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server17.setTime(iTime25);
    tp2.ITime iTime27 = server17.getTime();
    server9.setTime(iTime27);
    server0.setTime(iTime27);
    boolean b30 = server0.repOK();
    tp2.IP iP31 = null;
    boolean b32 = server0.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server33.update();
    java.lang.String str37 = server33.toString();
    tp2.IP iP38 = null;
    boolean b39 = server33.removeBan(iP38);
    tp2.ITime iTime40 = server33.getTime();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    tp2.IP iP45 = null;
    boolean b46 = server41.removeException(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server41.setTime(iTime49);
    tp2.ITime iTime51 = server41.getTime();
    server33.setTime(iTime51);
    long long53 = server33.getLastUpdate();
    java.lang.String str54 = server33.toString();
    tp2.ITime iTime55 = server33.getTime();
    server0.setTime(iTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424052968, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424052968, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=1465424052969, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=1465424052969, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long53 == 1465424052969L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=1465424052969, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=1465424052969, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test171"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    server0.update();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeBan(iP6);
    server0.update();
    tp2.IP iP9 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b10 = server0.addException(iP9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424052986, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424052986, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test172"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.removeBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    java.lang.String str8 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test173"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    tp2.IP iP23 = null;
    boolean b24 = server19.removeException(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server19.setTime(iTime27);
    server15.setTime(iTime27);
    tp2.IP iP30 = null;
    boolean b31 = server15.removeBan(iP30);
    tp2.ITime iTime32 = server15.getTime();
    server0.setTime(iTime32);
    server0.update();
    boolean b35 = server0.repOK();
    tp2.ITime iTime36 = server0.getTime();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    tp2.IP iP42 = null;
    boolean b43 = server37.removeBan(iP42);
    tp2.ITime iTime44 = server37.getTime();
    java.lang.String str45 = server37.toString();
    tp2.IP iP46 = null;
    boolean b47 = server37.removeBan(iP46);
    tp2.Server server48 = new tp2.Server();
    java.lang.String str49 = server48.toString();
    tp2.ITime iTime50 = server48.getTime();
    server48.update();
    tp2.Server server52 = new tp2.Server();
    java.lang.String str53 = server52.toString();
    tp2.ITime iTime54 = server52.getTime();
    server52.update();
    tp2.IP iP56 = null;
    boolean b57 = server52.removeException(iP56);
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    tp2.ITime iTime60 = server58.getTime();
    server52.setTime(iTime60);
    server48.setTime(iTime60);
    tp2.IP iP63 = null;
    boolean b64 = server48.removeBan(iP63);
    tp2.ITime iTime65 = server48.getTime();
    tp2.IP iP66 = null;
    boolean b67 = server48.removeException(iP66);
    tp2.IP iP68 = null;
    boolean b69 = server48.removeBan(iP68);
    tp2.ITime iTime70 = server48.getTime();
    server37.setTime(iTime70);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    tp2.ITime iTime74 = server72.getTime();
    server72.update();
    tp2.IP iP76 = null;
    boolean b77 = server72.removeException(iP76);
    tp2.Server server78 = new tp2.Server();
    java.lang.String str79 = server78.toString();
    tp2.ITime iTime80 = server78.getTime();
    server72.setTime(iTime80);
    tp2.ITime iTime82 = server72.getTime();
    tp2.Server server83 = new tp2.Server();
    java.lang.String str84 = server83.toString();
    tp2.ITime iTime85 = server83.getTime();
    server83.update();
    tp2.IP iP87 = null;
    boolean b88 = server83.removeException(iP87);
    tp2.Server server89 = new tp2.Server();
    java.lang.String str90 = server89.toString();
    tp2.ITime iTime91 = server89.getTime();
    server83.setTime(iTime91);
    server72.setTime(iTime91);
    server37.setTime(iTime91);
    tp2.ITime iTime95 = server37.getTime();
    server0.setTime(iTime95);
    tp2.IP iP97 = null;
    boolean b98 = server0.connect(iP97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424052988, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424052988, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424052989, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424052989, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465424052989, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=1465424052989, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str79.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str84.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str90.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test174"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    boolean b3 = server0.repOK();
    boolean b4 = server0.repOK();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    long long10 = server5.getLastUpdate();
    long long11 = server5.getLastUpdate();
    tp2.IP iP12 = null;
    boolean b13 = server5.removeException(iP12);
    java.lang.String str14 = server5.toString();
    tp2.IP iP15 = null;
    boolean b16 = server5.addBan(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    tp2.IP iP20 = null;
    boolean b21 = server17.addBan(iP20);
    tp2.ITime iTime22 = server17.getTime();
    server5.setTime(iTime22);
    server0.setTime(iTime22);
    boolean b25 = server0.repOK();
    tp2.IP iP26 = null;
    boolean b27 = server0.connect(iP26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424053038, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424053038, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053038L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053038L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424053038, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424053038, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test175"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    server0.update();
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    long long21 = server11.getLastUpdate();
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    java.lang.String str26 = server22.toString();
    tp2.IP iP27 = null;
    boolean b28 = server22.removeBan(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    tp2.ITime iTime39 = server29.getTime();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    server29.setTime(iTime48);
    server22.setTime(iTime48);
    server11.setTime(iTime48);
    tp2.ITime iTime53 = server11.getTime();
    server0.setTime(iTime53);
    java.lang.String str55 = server0.toString();
    server0.update();
    tp2.IP iP57 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b58 = server0.addException(iP57);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053041, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053041, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424053041, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424053041, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424053041L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424053041, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424053041, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=1465424053041, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=1465424053041, exceptions=(), bans={}]"));

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test176"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    boolean b11 = server0.repOK();
    server0.update();
    tp2.IP iP13 = null;
    boolean b14 = server0.addBan(iP13);
    tp2.IP iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = server0.addException(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053044, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053044, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053044L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test177"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    tp2.ITime iTime16 = server0.getTime();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    long long19 = server0.getLastUpdate();
    tp2.IP iP20 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = server0.removeBan(iP20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1465424053044L);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test178"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.addBan(iP22);
    java.lang.String str24 = server0.toString();
    tp2.IP iP25 = null;
    boolean b26 = server0.removeException(iP25);
    java.lang.String str27 = server0.toString();
    long long28 = server0.getLastUpdate();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424053045, exceptions=(), bans={[IPBan [ip=null, expires=1465424113045]]}]"+ "'", str24.equals("Server [lastUpdate=1465424053045, exceptions=(), bans={[IPBan [ip=null, expires=1465424113045]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424053045, exceptions=(), bans={[IPBan [ip=null, expires=1465424113045]]}]"+ "'", str27.equals("Server [lastUpdate=1465424053045, exceptions=(), bans={[IPBan [ip=null, expires=1465424113045]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1465424053045L);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test179"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.Server server12 = new tp2.Server();
    tp2.ITime iTime13 = null;
    server12.setTime(iTime13);
    tp2.IP iP15 = null;
    boolean b16 = server12.removeException(iP15);
    tp2.IP iP17 = null;
    boolean b18 = server12.connect(iP17);
    boolean b19 = server12.repOK();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    tp2.IP iP24 = null;
    boolean b25 = server20.removeException(iP24);
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    tp2.ITime iTime28 = server26.getTime();
    server20.setTime(iTime28);
    server20.update();
    tp2.ITime iTime31 = server20.getTime();
    tp2.ITime iTime32 = server20.getTime();
    server12.setTime(iTime32);
    server0.setTime(iTime32);
    boolean b35 = server0.repOK();
    tp2.IP iP36 = null;
    boolean b37 = server0.removeException(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test180"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.removeException(iP13);
    tp2.IP iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = server0.addException(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053064, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053064, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053064L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424053064L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424053064, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424053064, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test181"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.addBan(iP9);
    tp2.IP iP11 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b12 = server0.addException(iP11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053065, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053065, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053065L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424053065L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test182"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    long long9 = server0.getLastUpdate();
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    tp2.ITime iTime12 = null;
    server11.setTime(iTime12);
    tp2.IP iP14 = null;
    boolean b15 = server11.removeException(iP14);
    tp2.IP iP16 = null;
    boolean b17 = server11.connect(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server11.removeBan(iP18);
    tp2.ITime iTime20 = server11.getTime();
    tp2.Server server21 = new tp2.Server();
    tp2.IP iP22 = null;
    boolean b23 = server21.removeException(iP22);
    java.lang.String str24 = server21.toString();
    java.lang.String str25 = server21.toString();
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    tp2.ITime iTime28 = server26.getTime();
    server26.update();
    tp2.IP iP30 = null;
    boolean b31 = server26.removeException(iP30);
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.ITime iTime34 = server32.getTime();
    server26.setTime(iTime34);
    server26.update();
    tp2.ITime iTime37 = server26.getTime();
    server21.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test183"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    tp2.IP iP9 = null;
    boolean b10 = server5.removeException(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server5.setTime(iTime13);
    server5.update();
    tp2.ITime iTime16 = server5.getTime();
    server0.setTime(iTime16);
    java.lang.String str18 = server0.toString();
    tp2.ITime iTime19 = server0.getTime();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    java.lang.String str24 = server20.toString();
    long long25 = server20.getLastUpdate();
    long long26 = server20.getLastUpdate();
    tp2.IP iP27 = null;
    boolean b28 = server20.removeException(iP27);
    tp2.ITime iTime29 = server20.getTime();
    server20.update();
    boolean b31 = server20.repOK();
    tp2.ITime iTime32 = server20.getTime();
    server0.setTime(iTime32);
    tp2.ITime iTime34 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424053072, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=1465424053072, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424053072L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424053072L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test184"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    tp2.ITime iTime13 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053079, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053079, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053079L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053080L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test185"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    java.lang.String str10 = server0.toString();
    tp2.ITime iTime11 = server0.getTime();
    boolean b12 = server0.repOK();
    tp2.IP iP13 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = server0.addException(iP13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424053080, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424053080, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test186"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    boolean b37 = server0.repOK();
    tp2.IP iP38 = null;
    boolean b39 = server0.connect(iP38);
    tp2.Server server40 = new tp2.Server();
    tp2.ITime iTime41 = null;
    server40.setTime(iTime41);
    tp2.IP iP43 = null;
    boolean b44 = server40.removeException(iP43);
    tp2.IP iP45 = null;
    boolean b46 = server40.removeException(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.IP iP49 = null;
    boolean b50 = server47.removeException(iP49);
    tp2.IP iP51 = null;
    boolean b52 = server47.connect(iP51);
    tp2.IP iP53 = null;
    boolean b54 = server47.addBan(iP53);
    tp2.ITime iTime55 = server47.getTime();
    server40.setTime(iTime55);
    server0.setTime(iTime55);
    java.lang.String str58 = server0.toString();
    tp2.IP iP59 = null;
    boolean b60 = server0.removeException(iP59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=1465424053081, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=1465424053081, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test187"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    long long6 = server0.getLastUpdate();
    boolean b7 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424053095L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test188"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    tp2.ITime iTime12 = server0.getTime();
    boolean b13 = server0.repOK();
    boolean b14 = server0.repOK();
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.connect(iP16);
    long long18 = server0.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeException(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test189"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.removeBan(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.removeBan(iP14);
    java.lang.String str16 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053096, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053096, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053096L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465424053096, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465424053096, exceptions=(), bans={}]"));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test190"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    long long30 = server0.getLastUpdate();
    tp2.ITime iTime31 = server0.getTime();
    tp2.IP iP32 = null;
    boolean b33 = server0.addBan(iP32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053098, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053098, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 1465424053098L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test191"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    long long18 = server0.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server0.addBan(iP19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424053105L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test192"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.ITime iTime7 = server0.getTime();
    tp2.ITime iTime8 = server0.getTime();
    boolean b9 = server0.repOK();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053108, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053108, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053108L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test193"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    boolean b9 = server0.addBan(iP8);
    boolean b10 = server0.repOK();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    long long16 = server11.getLastUpdate();
    long long17 = server11.getLastUpdate();
    tp2.IP iP18 = null;
    boolean b19 = server11.removeException(iP18);
    java.lang.String str20 = server11.toString();
    boolean b21 = server11.repOK();
    tp2.IP iP22 = null;
    boolean b23 = server11.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.addBan(iP28);
    tp2.ITime iTime30 = server24.getTime();
    server11.setTime(iTime30);
    java.lang.String str32 = server11.toString();
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server33.update();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    tp2.IP iP41 = null;
    boolean b42 = server37.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server37.setTime(iTime45);
    server33.setTime(iTime45);
    tp2.IP iP48 = null;
    boolean b49 = server33.removeBan(iP48);
    tp2.ITime iTime50 = server33.getTime();
    server11.setTime(iTime50);
    server0.setTime(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053110, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053110, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053111, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053111, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053111L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424053111L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=1465424053111, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=1465424053111, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=1465424053111, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=1465424053111, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test194"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    long long35 = server30.getLastUpdate();
    long long36 = server30.getLastUpdate();
    tp2.IP iP37 = null;
    boolean b38 = server30.removeException(iP37);
    java.lang.String str39 = server30.toString();
    tp2.IP iP40 = null;
    boolean b41 = server30.addBan(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.IP iP44 = null;
    boolean b45 = server42.removeException(iP44);
    tp2.ITime iTime46 = server42.getTime();
    server30.setTime(iTime46);
    server0.setTime(iTime46);
    tp2.ITime iTime49 = server0.getTime();
    java.lang.String str50 = server0.toString();
    tp2.IP iP51 = null;
    boolean b52 = server0.connect(iP51);
    tp2.IP iP53 = null;
    boolean b54 = server0.removeBan(iP53);
    java.lang.String str55 = server0.toString();
    tp2.IP iP56 = null;
    boolean b57 = server0.connect(iP56);
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    tp2.ITime iTime60 = server58.getTime();
    server58.update();
    java.lang.String str62 = server58.toString();
    long long63 = server58.getLastUpdate();
    tp2.ITime iTime64 = server58.getTime();
    boolean b65 = server58.repOK();
    tp2.IP iP66 = null;
    boolean b67 = server58.addBan(iP66);
    tp2.ITime iTime68 = server58.getTime();
    tp2.Server server69 = new tp2.Server();
    java.lang.String str70 = server69.toString();
    tp2.ITime iTime71 = server69.getTime();
    server69.update();
    tp2.Server server73 = new tp2.Server();
    java.lang.String str74 = server73.toString();
    tp2.ITime iTime75 = server73.getTime();
    server73.update();
    tp2.IP iP77 = null;
    boolean b78 = server73.removeException(iP77);
    tp2.Server server79 = new tp2.Server();
    java.lang.String str80 = server79.toString();
    tp2.ITime iTime81 = server79.getTime();
    server73.setTime(iTime81);
    server69.setTime(iTime81);
    tp2.IP iP84 = null;
    boolean b85 = server69.removeBan(iP84);
    tp2.ITime iTime86 = server69.getTime();
    long long87 = server69.getLastUpdate();
    tp2.Server server88 = new tp2.Server();
    java.lang.String str89 = server88.toString();
    tp2.ITime iTime90 = server88.getTime();
    server88.update();
    java.lang.String str92 = server88.toString();
    long long93 = server88.getLastUpdate();
    tp2.ITime iTime94 = server88.getTime();
    tp2.ITime iTime95 = server88.getTime();
    server69.setTime(iTime95);
    server58.setTime(iTime95);
    server0.setTime(iTime95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053123, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053123, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424053124, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424053124, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424053124L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424053124L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424053124, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424053124, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465424053123, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465424053123, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=1465424053123, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=1465424053123, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=1465424053126, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=1465424053126, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1465424053126L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str70.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str74.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str80.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 1465424053126L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str89.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "Server [lastUpdate=1465424053127, exceptions=(), bans={}]"+ "'", str92.equals("Server [lastUpdate=1465424053127, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long93 == 1465424053127L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime95);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test195"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.ITime iTime9 = server0.getTime();
    server0.update();
    boolean b11 = server0.repOK();
    tp2.ITime iTime12 = server0.getTime();
    server0.update();
    long long14 = server0.getLastUpdate();
    tp2.IP iP15 = null;
    boolean b16 = server0.connect(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053166, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053166, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053166L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424053166L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424053166L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test196"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    server0.update();
    server0.update();
    server0.update();
    boolean b9 = server0.repOK();
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    tp2.ITime iTime12 = server0.getTime();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    tp2.IP iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = server0.addException(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053167, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053167, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test197"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    long long16 = server0.getLastUpdate();
    tp2.ITime iTime17 = server0.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    java.lang.String str22 = server18.toString();
    long long23 = server18.getLastUpdate();
    long long24 = server18.getLastUpdate();
    tp2.IP iP25 = null;
    boolean b26 = server18.removeException(iP25);
    java.lang.String str27 = server18.toString();
    boolean b28 = server18.repOK();
    tp2.IP iP29 = null;
    boolean b30 = server18.connect(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server31.update();
    tp2.IP iP35 = null;
    boolean b36 = server31.addBan(iP35);
    tp2.ITime iTime37 = server31.getTime();
    server18.setTime(iTime37);
    server0.setTime(iTime37);
    java.lang.String str40 = server0.toString();
    tp2.IP iP41 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b42 = server0.addException(iP41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053168L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424053168, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424053168, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1465424053168L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424053168L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424053168, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=1465424053168, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424053168, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424053168, exceptions=(), bans={}]"));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test198"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.connect(iP18);
    tp2.ITime iTime20 = server0.getTime();
    boolean b21 = server0.repOK();
    boolean b22 = server0.repOK();
    tp2.IP iP23 = null;
    boolean b24 = server0.removeBan(iP23);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test199"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    boolean b3 = server0.repOK();
    boolean b4 = server0.repOK();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    long long10 = server5.getLastUpdate();
    long long11 = server5.getLastUpdate();
    tp2.IP iP12 = null;
    boolean b13 = server5.removeException(iP12);
    java.lang.String str14 = server5.toString();
    tp2.IP iP15 = null;
    boolean b16 = server5.addBan(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    tp2.IP iP20 = null;
    boolean b21 = server17.addBan(iP20);
    tp2.ITime iTime22 = server17.getTime();
    server5.setTime(iTime22);
    server0.setTime(iTime22);
    server0.update();
    tp2.IP iP26 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b27 = server0.addException(iP26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424053172, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424053172, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053172L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053172L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424053172, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424053172, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test200"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    boolean b4 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test201"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.connect(iP18);
    tp2.ITime iTime20 = server0.getTime();
    boolean b21 = server0.repOK();
    boolean b22 = server0.repOK();
    tp2.IP iP23 = null;
    boolean b24 = server0.removeBan(iP23);
    tp2.IP iP25 = null;
    boolean b26 = server0.removeBan(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test202"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.addBan(iP8);
    long long10 = server0.getLastUpdate();
    long long11 = server0.getLastUpdate();
    tp2.ITime iTime12 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053202L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053202L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test203"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    boolean b15 = server0.repOK();
    server0.update();
    long long17 = server0.getLastUpdate();
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    tp2.IP iP20 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = server0.addException(iP20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424053204L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test204"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.IP iP13 = null;
    boolean b14 = server11.removeException(iP13);
    boolean b15 = server11.repOK();
    tp2.ITime iTime16 = server11.getTime();
    server0.setTime(iTime16);
    tp2.IP iP18 = null;
    boolean b19 = server0.removeBan(iP18);
    boolean b20 = server0.repOK();
    tp2.IP iP21 = null;
    boolean b22 = server0.removeBan(iP21);
    tp2.IP iP23 = null;
    boolean b24 = server0.addBan(iP23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test205"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.ITime iTime7 = server0.getTime();
    long long8 = server0.getLastUpdate();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server9.addBan(iP12);
    tp2.ITime iTime14 = server9.getTime();
    tp2.ITime iTime15 = server9.getTime();
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    java.lang.String str20 = server16.toString();
    long long21 = server16.getLastUpdate();
    tp2.ITime iTime22 = server16.getTime();
    tp2.ITime iTime23 = server16.getTime();
    tp2.IP iP24 = null;
    boolean b25 = server16.addBan(iP24);
    tp2.ITime iTime26 = server16.getTime();
    server9.setTime(iTime26);
    boolean b28 = server9.repOK();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    java.lang.String str33 = server29.toString();
    long long34 = server29.getLastUpdate();
    boolean b35 = server29.repOK();
    tp2.IP iP36 = null;
    boolean b37 = server29.removeException(iP36);
    boolean b38 = server29.repOK();
    long long39 = server29.getLastUpdate();
    boolean b40 = server29.repOK();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    java.lang.String str45 = server41.toString();
    long long46 = server41.getLastUpdate();
    long long47 = server41.getLastUpdate();
    tp2.IP iP48 = null;
    boolean b49 = server41.removeException(iP48);
    tp2.ITime iTime50 = server41.getTime();
    server29.setTime(iTime50);
    server9.setTime(iTime50);
    server0.setTime(iTime50);
    server0.update();
    tp2.IP iP55 = null;
    boolean b56 = server0.addBan(iP55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053207, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053207, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053207L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424053207L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=1465424053208, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=1465424053208, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424053208L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=1465424053208, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=1465424053208, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1465424053208L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long39 == 1465424053208L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465424053209, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=1465424053209, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long46 == 1465424053209L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 1465424053209L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test206"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    boolean b6 = server0.repOK();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    boolean b17 = server11.repOK();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server11.setTime(iTime26);
    long long29 = server11.getLastUpdate();
    tp2.ITime iTime30 = server11.getTime();
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server31.update();
    tp2.IP iP35 = null;
    boolean b36 = server31.removeException(iP35);
    boolean b37 = server31.repOK();
    tp2.Server server38 = new tp2.Server();
    java.lang.String str39 = server38.toString();
    tp2.ITime iTime40 = server38.getTime();
    server38.update();
    tp2.IP iP42 = null;
    boolean b43 = server38.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server38.setTime(iTime46);
    server31.setTime(iTime46);
    server11.setTime(iTime46);
    java.lang.String str50 = server11.toString();
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    tp2.ITime iTime53 = server51.getTime();
    server51.update();
    tp2.IP iP55 = null;
    boolean b56 = server51.removeException(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.ITime iTime59 = server57.getTime();
    server51.setTime(iTime59);
    tp2.ITime iTime61 = server51.getTime();
    tp2.Server server62 = new tp2.Server();
    java.lang.String str63 = server62.toString();
    tp2.ITime iTime64 = server62.getTime();
    server62.update();
    tp2.IP iP66 = null;
    boolean b67 = server62.removeException(iP66);
    tp2.Server server68 = new tp2.Server();
    java.lang.String str69 = server68.toString();
    tp2.ITime iTime70 = server68.getTime();
    server62.setTime(iTime70);
    server51.setTime(iTime70);
    long long73 = server51.getLastUpdate();
    boolean b74 = server51.repOK();
    tp2.IP iP75 = null;
    boolean b76 = server51.removeException(iP75);
    tp2.IP iP77 = null;
    boolean b78 = server51.connect(iP77);
    tp2.ITime iTime79 = server51.getTime();
    server11.setTime(iTime79);
    tp2.ITime iTime81 = server11.getTime();
    server0.setTime(iTime81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=1465424053232, exceptions=(), bans={[IPBan [ip=null, expires=1465424113232]]}]"+ "'", str7.equals("Server [lastUpdate=1465424053232, exceptions=(), bans={[IPBan [ip=null, expires=1465424113232]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424053233L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465424053233, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465424053233, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str63.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str69.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long73 == 1465424053235L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime81);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test207"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    java.lang.String str10 = server0.toString();
    long long11 = server0.getLastUpdate();
    boolean b12 = server0.repOK();
    server0.update();
    tp2.IP iP14 = null;
    boolean b15 = server0.removeException(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test208"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    server0.update();
    java.lang.String str9 = server0.toString();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    tp2.IP iP12 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b13 = server0.removeBan(iP12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424053293, exceptions=(), bans={[IPBan [ip=null, expires=1465424113293]]}]"+ "'", str9.equals("Server [lastUpdate=1465424053293, exceptions=(), bans={[IPBan [ip=null, expires=1465424113293]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test209"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    server0.update();
    long long9 = server0.getLastUpdate();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424053294L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test210"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.connect(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.removeBan(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server6.update();
    tp2.IP iP10 = null;
    boolean b11 = server6.removeException(iP10);
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server6.setTime(iTime14);
    server6.update();
    tp2.ITime iTime17 = server6.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server6.removeException(iP18);
    java.lang.String str20 = server6.toString();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server21.setTime(iTime33);
    tp2.IP iP36 = null;
    boolean b37 = server21.removeBan(iP36);
    tp2.ITime iTime38 = server21.getTime();
    server6.setTime(iTime38);
    server6.update();
    boolean b41 = server6.repOK();
    tp2.ITime iTime42 = server6.getTime();
    server0.setTime(iTime42);
    tp2.IP iP44 = null;
    boolean b45 = server0.removeBan(iP44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=1465424053295, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=1465424053295, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test211"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.ITime iTime22 = server0.getTime();
    server0.update();
    tp2.ITime iTime24 = server0.getTime();
    long long25 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424053316L);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test212"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    tp2.IP iP9 = null;
    boolean b10 = server5.removeException(iP9);
    boolean b11 = server5.repOK();
    tp2.IP iP12 = null;
    boolean b13 = server5.connect(iP12);
    long long14 = server5.getLastUpdate();
    tp2.ITime iTime15 = server5.getTime();
    server5.update();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.IP iP21 = null;
    boolean b22 = server17.removeException(iP21);
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server17.setTime(iTime25);
    tp2.ITime iTime27 = server17.getTime();
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    tp2.ITime iTime30 = server28.getTime();
    server28.update();
    tp2.IP iP32 = null;
    boolean b33 = server28.removeException(iP32);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    tp2.ITime iTime36 = server34.getTime();
    server28.setTime(iTime36);
    server17.setTime(iTime36);
    tp2.IP iP39 = null;
    boolean b40 = server17.connect(iP39);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    tp2.IP iP45 = null;
    boolean b46 = server41.removeException(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server41.setTime(iTime49);
    server41.update();
    tp2.ITime iTime52 = server41.getTime();
    server17.setTime(iTime52);
    tp2.IP iP54 = null;
    boolean b55 = server17.removeException(iP54);
    long long56 = server17.getLastUpdate();
    java.lang.String str57 = server17.toString();
    tp2.Server server58 = new tp2.Server();
    java.lang.String str59 = server58.toString();
    tp2.ITime iTime60 = server58.getTime();
    server58.update();
    java.lang.String str62 = server58.toString();
    tp2.IP iP63 = null;
    boolean b64 = server58.removeBan(iP63);
    tp2.ITime iTime65 = server58.getTime();
    tp2.Server server66 = new tp2.Server();
    java.lang.String str67 = server66.toString();
    tp2.ITime iTime68 = server66.getTime();
    server66.update();
    tp2.IP iP70 = null;
    boolean b71 = server66.removeException(iP70);
    tp2.Server server72 = new tp2.Server();
    java.lang.String str73 = server72.toString();
    tp2.ITime iTime74 = server72.getTime();
    server66.setTime(iTime74);
    tp2.ITime iTime76 = server66.getTime();
    server58.setTime(iTime76);
    server17.setTime(iTime76);
    server5.setTime(iTime76);
    server0.setTime(iTime76);
    tp2.IP iP81 = null;
    boolean b82 = server0.removeBan(iP81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053326, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053326, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424053327L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 1465424053327L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Server [lastUpdate=1465424053327, exceptions=(), bans={}]"+ "'", str57.equals("Server [lastUpdate=1465424053327, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=1465424053329, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=1465424053329, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str67.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str73.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test213"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeBan(iP12);
    tp2.ITime iTime14 = server7.getTime();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.IP iP19 = null;
    boolean b20 = server15.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server15.setTime(iTime23);
    tp2.ITime iTime25 = server15.getTime();
    server7.setTime(iTime25);
    server0.setTime(iTime25);
    tp2.IP iP28 = null;
    boolean b29 = server0.addBan(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    tp2.IP iP34 = null;
    boolean b35 = server30.removeException(iP34);
    boolean b36 = server30.repOK();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    tp2.IP iP41 = null;
    boolean b42 = server37.removeException(iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server37.setTime(iTime45);
    server30.setTime(iTime45);
    server0.setTime(iTime45);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053358, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053358, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053358L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424053358, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424053358, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test214"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    boolean b4 = server0.repOK();
    tp2.IP iP5 = null;
    boolean b6 = server0.addBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test215"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    server9.update();
    tp2.IP iP13 = null;
    boolean b14 = server9.removeException(iP13);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server9.setTime(iTime17);
    server9.update();
    tp2.ITime iTime20 = server9.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server9.removeException(iP21);
    server9.update();
    tp2.ITime iTime24 = server9.getTime();
    server0.setTime(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test216"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    server0.update();
    tp2.IP iP14 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = server0.connect(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test217"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.ITime iTime10 = server0.getTime();
    long long11 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test218"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    boolean b16 = server0.repOK();
    boolean b17 = server0.repOK();
    server0.update();
    java.lang.String str19 = server0.toString();
    tp2.IP iP20 = null;
    boolean b21 = server0.removeBan(iP20);
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    java.lang.String str26 = server22.toString();
    tp2.IP iP27 = null;
    boolean b28 = server22.removeException(iP27);
    tp2.IP iP29 = null;
    boolean b30 = server22.removeBan(iP29);
    tp2.IP iP31 = null;
    boolean b32 = server22.removeBan(iP31);
    tp2.IP iP33 = null;
    boolean b34 = server22.connect(iP33);
    tp2.ITime iTime35 = server22.getTime();
    server0.setTime(iTime35);
    tp2.IP iP37 = null;
    boolean b38 = server0.removeException(iP37);
    tp2.ITime iTime39 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=1465424053375, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=1465424053375, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424053375, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424053375, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test219"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    server0.update();
    boolean b8 = server0.repOK();
    tp2.ITime iTime9 = server0.getTime();
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.ITime iTime18 = server11.getTime();
    tp2.ITime iTime19 = server11.getTime();
    tp2.IP iP20 = null;
    boolean b21 = server11.removeException(iP20);
    tp2.ITime iTime22 = server11.getTime();
    server0.setTime(iTime22);
    tp2.IP iP24 = null;
    boolean b25 = server0.connect(iP24);
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    tp2.ITime iTime28 = server26.getTime();
    server26.update();
    java.lang.String str30 = server26.toString();
    long long31 = server26.getLastUpdate();
    long long32 = server26.getLastUpdate();
    tp2.IP iP33 = null;
    boolean b34 = server26.removeException(iP33);
    java.lang.String str35 = server26.toString();
    tp2.IP iP36 = null;
    boolean b37 = server26.addBan(iP36);
    tp2.Server server38 = new tp2.Server();
    java.lang.String str39 = server38.toString();
    tp2.IP iP40 = null;
    boolean b41 = server38.removeException(iP40);
    tp2.ITime iTime42 = server38.getTime();
    server26.setTime(iTime42);
    server0.setTime(iTime42);
    tp2.Server server45 = new tp2.Server();
    tp2.ITime iTime46 = null;
    server45.setTime(iTime46);
    tp2.ITime iTime48 = server45.getTime();
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server49.update();
    java.lang.String str53 = server49.toString();
    tp2.IP iP54 = null;
    boolean b55 = server49.removeBan(iP54);
    tp2.ITime iTime56 = server49.getTime();
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.ITime iTime59 = server57.getTime();
    server57.update();
    tp2.IP iP61 = null;
    boolean b62 = server57.removeException(iP61);
    tp2.Server server63 = new tp2.Server();
    java.lang.String str64 = server63.toString();
    tp2.ITime iTime65 = server63.getTime();
    server57.setTime(iTime65);
    tp2.ITime iTime67 = server57.getTime();
    server49.setTime(iTime67);
    server45.setTime(iTime67);
    tp2.IP iP70 = null;
    boolean b71 = server45.removeBan(iP70);
    tp2.ITime iTime72 = server45.getTime();
    server0.setTime(iTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053378, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053378, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053378L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424053378L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053379, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053379, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=1465424053380, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=1465424053380, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1465424053380L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1465424053380L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=1465424053380, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=1465424053380, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=1465424053380, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=1465424053380, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str64.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime72);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test220"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server9.addBan(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server9.removeException(iP14);
    long long16 = server9.getLastUpdate();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.IP iP25 = null;
    boolean b26 = server21.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server21.setTime(iTime29);
    server17.setTime(iTime29);
    server9.setTime(iTime29);
    long long33 = server9.getLastUpdate();
    tp2.ITime iTime34 = server9.getTime();
    server0.setTime(iTime34);
    tp2.ITime iTime36 = server0.getTime();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    tp2.IP iP42 = null;
    boolean b43 = server37.removeBan(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    tp2.IP iP48 = null;
    boolean b49 = server44.removeException(iP48);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    tp2.ITime iTime52 = server50.getTime();
    server44.setTime(iTime52);
    tp2.ITime iTime54 = server44.getTime();
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    tp2.ITime iTime57 = server55.getTime();
    server55.update();
    tp2.IP iP59 = null;
    boolean b60 = server55.removeException(iP59);
    tp2.Server server61 = new tp2.Server();
    java.lang.String str62 = server61.toString();
    tp2.ITime iTime63 = server61.getTime();
    server55.setTime(iTime63);
    server44.setTime(iTime63);
    server37.setTime(iTime63);
    tp2.Server server67 = new tp2.Server();
    java.lang.String str68 = server67.toString();
    tp2.ITime iTime69 = server67.getTime();
    server67.update();
    java.lang.String str71 = server67.toString();
    long long72 = server67.getLastUpdate();
    long long73 = server67.getLastUpdate();
    tp2.IP iP74 = null;
    boolean b75 = server67.removeException(iP74);
    java.lang.String str76 = server67.toString();
    tp2.IP iP77 = null;
    boolean b78 = server67.addBan(iP77);
    tp2.Server server79 = new tp2.Server();
    java.lang.String str80 = server79.toString();
    tp2.IP iP81 = null;
    boolean b82 = server79.removeException(iP81);
    tp2.ITime iTime83 = server79.getTime();
    server67.setTime(iTime83);
    server37.setTime(iTime83);
    tp2.ITime iTime86 = server37.getTime();
    server0.setTime(iTime86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053402, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053402, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053402L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053402L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424053404, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424053404, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "Server [lastUpdate=1465424053405, exceptions=(), bans={}]"+ "'", str71.equals("Server [lastUpdate=1465424053405, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 1465424053405L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long73 == 1465424053405L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Server [lastUpdate=1465424053405, exceptions=(), bans={}]"+ "'", str76.equals("Server [lastUpdate=1465424053405, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str80.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime86);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test221"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    tp2.IP iP9 = null;
    boolean b10 = server6.addBan(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server6.removeException(iP11);
    long long13 = server6.getLastUpdate();
    tp2.IP iP14 = null;
    boolean b15 = server6.removeException(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    tp2.IP iP24 = null;
    boolean b25 = server20.removeException(iP24);
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    tp2.ITime iTime28 = server26.getTime();
    server20.setTime(iTime28);
    tp2.ITime iTime30 = server20.getTime();
    server16.setTime(iTime30);
    server6.setTime(iTime30);
    server0.setTime(iTime30);
    tp2.IP iP34 = null;
    boolean b35 = server0.addBan(iP34);
    long long36 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053450, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053450, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053450L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424053450L);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test222"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    boolean b15 = server0.repOK();
    server0.update();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.IP iP21 = null;
    boolean b22 = server19.removeException(iP21);
    tp2.ITime iTime23 = server19.getTime();
    java.lang.String str24 = server19.toString();
    long long25 = server19.getLastUpdate();
    tp2.ITime iTime26 = server19.getTime();
    tp2.IP iP27 = null;
    boolean b28 = server19.connect(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    java.lang.String str33 = server29.toString();
    long long34 = server29.getLastUpdate();
    tp2.ITime iTime35 = server29.getTime();
    server19.setTime(iTime35);
    long long37 = server19.getLastUpdate();
    tp2.IP iP38 = null;
    boolean b39 = server19.removeBan(iP38);
    tp2.ITime iTime40 = server19.getTime();
    server0.setTime(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=1465424053463, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=1465424053463, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1465424053463L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test223"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    long long11 = server0.getLastUpdate();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server12.setTime(iTime20);
    long long22 = server12.getLastUpdate();
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    java.lang.String str27 = server23.toString();
    tp2.IP iP28 = null;
    boolean b29 = server23.removeBan(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    tp2.IP iP34 = null;
    boolean b35 = server30.removeException(iP34);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server30.setTime(iTime38);
    tp2.ITime iTime40 = server30.getTime();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    tp2.IP iP45 = null;
    boolean b46 = server41.removeException(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server41.setTime(iTime49);
    server30.setTime(iTime49);
    server23.setTime(iTime49);
    server12.setTime(iTime49);
    server0.setTime(iTime49);
    long long55 = server0.getLastUpdate();
    tp2.IP iP56 = null;
    boolean b57 = server0.removeBan(iP56);
    tp2.IP iP58 = null;
    boolean b59 = server0.connect(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053475L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424053475L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424053476, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=1465424053476, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long55 == 1465424053475L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test224"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.ITime iTime11 = server0.getTime();
    tp2.Server server12 = new tp2.Server();
    tp2.ITime iTime13 = null;
    server12.setTime(iTime13);
    tp2.IP iP15 = null;
    boolean b16 = server12.removeException(iP15);
    tp2.IP iP17 = null;
    boolean b18 = server12.connect(iP17);
    boolean b19 = server12.repOK();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    tp2.IP iP24 = null;
    boolean b25 = server20.removeException(iP24);
    tp2.Server server26 = new tp2.Server();
    java.lang.String str27 = server26.toString();
    tp2.ITime iTime28 = server26.getTime();
    server20.setTime(iTime28);
    server20.update();
    tp2.ITime iTime31 = server20.getTime();
    tp2.ITime iTime32 = server20.getTime();
    server12.setTime(iTime32);
    server0.setTime(iTime32);
    tp2.IP iP35 = null;
    boolean b36 = server0.removeBan(iP35);
    long long37 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long37 == 1465424053496L);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test225"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    java.lang.String str6 = server0.toString();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=1465424053505, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=1465424053505, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test226"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.ITime iTime3 = server0.getTime();
    long long4 = server0.getLastUpdate();
    boolean b5 = server0.repOK();
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    java.lang.String str12 = server8.toString();
    long long13 = server8.getLastUpdate();
    boolean b14 = server8.repOK();
    tp2.IP iP15 = null;
    boolean b16 = server8.removeException(iP15);
    tp2.IP iP17 = null;
    boolean b18 = server8.connect(iP17);
    boolean b19 = server8.repOK();
    tp2.ITime iTime20 = server8.getTime();
    server0.setTime(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424053510, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424053510, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424053510L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test227"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    java.lang.String str6 = server0.toString();
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.addBan(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=1465424053512, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=1465424053512, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053512L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test228"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.connect(iP13);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053513, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053513, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053513L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053513L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test229"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.ITime iTime12 = server0.getTime();
    boolean b13 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test230"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    boolean b37 = server0.repOK();
    boolean b38 = server0.repOK();
    tp2.IP iP39 = null;
    boolean b40 = server0.connect(iP39);
    tp2.IP iP41 = null;
    boolean b42 = server0.addBan(iP41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test231"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    long long2 = server0.getLastUpdate();
    boolean b3 = server0.repOK();
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.ITime iTime6 = server0.getTime();
    tp2.ITime iTime7 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1465424053535L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test232"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    long long35 = server30.getLastUpdate();
    long long36 = server30.getLastUpdate();
    tp2.IP iP37 = null;
    boolean b38 = server30.removeException(iP37);
    java.lang.String str39 = server30.toString();
    tp2.IP iP40 = null;
    boolean b41 = server30.addBan(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.IP iP44 = null;
    boolean b45 = server42.removeException(iP44);
    tp2.ITime iTime46 = server42.getTime();
    server30.setTime(iTime46);
    server0.setTime(iTime46);
    tp2.ITime iTime49 = server0.getTime();
    java.lang.String str50 = server0.toString();
    tp2.IP iP51 = null;
    boolean b52 = server0.connect(iP51);
    tp2.ITime iTime53 = server0.getTime();
    long long54 = server0.getLastUpdate();
    tp2.IP iP55 = null;
    boolean b56 = server0.removeException(iP55);
    tp2.IP iP57 = null;
    boolean b58 = server0.connect(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053537, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053537, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424053538, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424053538, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424053538L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424053538L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424053538, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424053538, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465424053537, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465424053537, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 1465424053537L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test233"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.addBan(iP9);
    long long11 = server0.getLastUpdate();
    java.lang.String str12 = server0.toString();
    tp2.IP iP13 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = server0.addBan(iP13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053566, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053566, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053566L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053566L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424053566, exceptions=(), bans={[IPBan [ip=null, expires=1465424113567]]}]"+ "'", str12.equals("Server [lastUpdate=1465424053566, exceptions=(), bans={[IPBan [ip=null, expires=1465424113567]]}]"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test234"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeBan(iP12);
    tp2.ITime iTime14 = server7.getTime();
    java.lang.String str15 = server7.toString();
    tp2.IP iP16 = null;
    boolean b17 = server7.removeBan(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server7.removeBan(iP18);
    boolean b20 = server7.repOK();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.IP iP23 = null;
    boolean b24 = server21.removeException(iP23);
    tp2.IP iP25 = null;
    boolean b26 = server21.connect(iP25);
    tp2.IP iP27 = null;
    boolean b28 = server21.addBan(iP27);
    tp2.ITime iTime29 = server21.getTime();
    server7.setTime(iTime29);
    server0.setTime(iTime29);
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.IP iP34 = null;
    boolean b35 = server32.removeException(iP34);
    tp2.IP iP36 = null;
    boolean b37 = server32.connect(iP36);
    tp2.IP iP38 = null;
    boolean b39 = server32.addBan(iP38);
    server32.update();
    tp2.ITime iTime41 = server32.getTime();
    server0.setTime(iTime41);
    long long43 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424053567, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424053567, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053567, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053567, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 0L);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test235"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    boolean b9 = server0.repOK();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    boolean b17 = server10.repOK();
    tp2.ITime iTime18 = server10.getTime();
    server10.update();
    tp2.ITime iTime20 = server10.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server10.removeBan(iP21);
    tp2.ITime iTime23 = server10.getTime();
    server0.setTime(iTime23);
    tp2.IP iP25 = null;
    boolean b26 = server0.connect(iP25);
    tp2.ITime iTime27 = null;
    server0.setTime(iTime27);
    tp2.IP iP29 = null;
    boolean b30 = server0.removeBan(iP29);
    boolean b31 = server0.repOK();
    long long32 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053571, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053571, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053571L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424053572, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424053572, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424053572L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1465424053571L);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test236"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    long long8 = server0.getLastUpdate();
    tp2.IP iP9 = null;
    boolean b10 = server0.addBan(iP9);
    long long11 = server0.getLastUpdate();
    tp2.IP iP12 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b13 = server0.addException(iP12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053578, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053578, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053578L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053578L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424053578L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053578L);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test237"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    java.lang.String str22 = server18.toString();
    tp2.IP iP23 = null;
    boolean b24 = server18.removeBan(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    tp2.ITime iTime35 = server25.getTime();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    tp2.IP iP40 = null;
    boolean b41 = server36.removeException(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.ITime iTime44 = server42.getTime();
    server36.setTime(iTime44);
    server25.setTime(iTime44);
    server18.setTime(iTime44);
    long long48 = server18.getLastUpdate();
    long long49 = server18.getLastUpdate();
    java.lang.String str50 = server18.toString();
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    tp2.IP iP53 = null;
    boolean b54 = server51.removeException(iP53);
    tp2.IP iP55 = null;
    boolean b56 = server51.connect(iP55);
    tp2.IP iP57 = null;
    boolean b58 = server51.addBan(iP57);
    server51.update();
    tp2.ITime iTime60 = server51.getTime();
    server18.setTime(iTime60);
    tp2.ITime iTime62 = server18.getTime();
    server0.setTime(iTime62);
    tp2.IP iP64 = null;
    boolean b65 = server0.addBan(iP64);
    tp2.IP iP66 = null;
    boolean b67 = server0.removeException(iP66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424053579, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424053579, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 1465424053579L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1465424053579L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=1465424053579, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=1465424053579, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test238"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    long long10 = server0.getLastUpdate();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.addBan(iP13);
    java.lang.String str15 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053599, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053599, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053599L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053599L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053599, exceptions=(), bans={[IPBan [ip=null, expires=1465424113599]]}]"+ "'", str15.equals("Server [lastUpdate=1465424053599, exceptions=(), bans={[IPBan [ip=null, expires=1465424113599]]}]"));

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test239"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    long long11 = server0.getLastUpdate();
    tp2.ITime iTime12 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053600L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test240"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    long long11 = server0.getLastUpdate();
    tp2.IP iP12 = null;
    boolean b13 = server0.connect(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    long long16 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053602L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053602L);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test241"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    server0.update();
    server0.update();
    server0.update();
    boolean b9 = server0.repOK();
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    tp2.ITime iTime12 = server0.getTime();
    boolean b13 = server0.repOK();
    tp2.IP iP14 = null;
    boolean b15 = server0.removeException(iP14);
    long long16 = server0.getLastUpdate();
    tp2.IP iP17 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b18 = server0.addException(iP17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053604, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053604, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053604L);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test242"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    boolean b8 = server0.repOK();
    boolean b9 = server0.repOK();
    server0.update();
    long long11 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053606, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053606, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053606L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053606L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053606L);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test243"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server9.addBan(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server9.removeException(iP14);
    long long16 = server9.getLastUpdate();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.IP iP25 = null;
    boolean b26 = server21.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server21.setTime(iTime29);
    server17.setTime(iTime29);
    server9.setTime(iTime29);
    long long33 = server9.getLastUpdate();
    tp2.ITime iTime34 = server9.getTime();
    server0.setTime(iTime34);
    tp2.IP iP36 = null;
    boolean b37 = server0.connect(iP36);
    server0.update();
    tp2.IP iP39 = null;
    boolean b40 = server0.removeException(iP39);
    java.lang.String str41 = server0.toString();
    tp2.IP iP42 = null;
    boolean b43 = server0.addBan(iP42);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053607, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053607, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053607L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053607L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424053608, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424053608, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test244"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    tp2.IP iP14 = null;
    boolean b15 = server10.removeException(iP14);
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server10.setTime(iTime18);
    server10.update();
    tp2.ITime iTime21 = server10.getTime();
    tp2.IP iP22 = null;
    boolean b23 = server10.removeException(iP22);
    java.lang.String str24 = server10.toString();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server25.setTime(iTime37);
    tp2.IP iP40 = null;
    boolean b41 = server25.removeBan(iP40);
    tp2.ITime iTime42 = server25.getTime();
    server10.setTime(iTime42);
    server0.setTime(iTime42);
    tp2.IP iP45 = null;
    boolean b46 = server0.removeBan(iP45);
    tp2.IP iP47 = null;
    boolean b48 = server0.removeBan(iP47);
    tp2.IP iP49 = null;
    boolean b50 = server0.removeBan(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053613, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053613, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053613L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424053614, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=1465424053614, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test245"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.ITime iTime5 = server0.getTime();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    long long9 = server0.getLastUpdate();
    long long10 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 0L);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test246"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    boolean b11 = server0.repOK();
    server0.update();
    long long13 = server0.getLastUpdate();
    long long14 = server0.getLastUpdate();
    tp2.IP iP15 = null;
    boolean b16 = server0.addBan(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424053624L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424053624L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test247"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    java.lang.String str8 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053625, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053625, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424053625, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465424053625, exceptions=(), bans={}]"));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test248"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    long long9 = server0.getLastUpdate();
    long long10 = server0.getLastUpdate();
    java.lang.String str11 = server0.toString();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    java.lang.String str16 = server12.toString();
    tp2.IP iP17 = null;
    boolean b18 = server12.removeBan(iP17);
    tp2.ITime iTime19 = server12.getTime();
    tp2.ITime iTime20 = server12.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server12.removeException(iP21);
    tp2.IP iP23 = null;
    boolean b24 = server12.removeException(iP23);
    tp2.Server server25 = new tp2.Server();
    server25.update();
    long long27 = server25.getLastUpdate();
    java.lang.String str28 = server25.toString();
    long long29 = server25.getLastUpdate();
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    tp2.IP iP34 = null;
    boolean b35 = server30.removeException(iP34);
    boolean b36 = server30.repOK();
    tp2.IP iP37 = null;
    boolean b38 = server30.removeException(iP37);
    tp2.IP iP39 = null;
    boolean b40 = server30.connect(iP39);
    long long41 = server30.getLastUpdate();
    tp2.ITime iTime42 = server30.getTime();
    tp2.ITime iTime43 = server30.getTime();
    long long44 = server30.getLastUpdate();
    server30.update();
    tp2.ITime iTime46 = server30.getTime();
    server25.setTime(iTime46);
    server12.setTime(iTime46);
    server0.setTime(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465424053628, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465424053628, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1465424053629L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=1465424053629, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=1465424053629, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424053629L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424053629L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 1465424053629L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test249"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    long long22 = server0.getLastUpdate();
    tp2.ITime iTime23 = server0.getTime();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 1465424053635L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test250"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    tp2.IP iP5 = null;
    boolean b6 = server0.addBan(iP5);
    java.lang.String str7 = server0.toString();
    boolean b8 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424113640]]}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424113640]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test251"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    boolean b11 = server0.repOK();
    server0.update();
    long long13 = server0.getLastUpdate();
    java.lang.String str14 = server0.toString();
    tp2.IP iP15 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b16 = server0.addException(iP15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424053642L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424053642, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424053642, exceptions=(), bans={}]"));

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test252"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    long long10 = server5.getLastUpdate();
    tp2.ITime iTime11 = server5.getTime();
    boolean b12 = server5.repOK();
    tp2.ITime iTime13 = server5.getTime();
    server0.setTime(iTime13);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    java.lang.String str19 = server15.toString();
    tp2.ITime iTime20 = server15.getTime();
    server15.update();
    server15.update();
    tp2.IP iP23 = null;
    boolean b24 = server15.connect(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server25.update();
    tp2.ITime iTime36 = server25.getTime();
    tp2.IP iP37 = null;
    boolean b38 = server25.removeException(iP37);
    java.lang.String str39 = server25.toString();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    tp2.IP iP48 = null;
    boolean b49 = server44.removeException(iP48);
    tp2.Server server50 = new tp2.Server();
    java.lang.String str51 = server50.toString();
    tp2.ITime iTime52 = server50.getTime();
    server44.setTime(iTime52);
    server40.setTime(iTime52);
    tp2.IP iP55 = null;
    boolean b56 = server40.removeBan(iP55);
    tp2.ITime iTime57 = server40.getTime();
    server25.setTime(iTime57);
    server25.update();
    tp2.ITime iTime60 = server25.getTime();
    server15.setTime(iTime60);
    server0.setTime(iTime60);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424053642, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424053642, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053642L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=1465424053643, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=1465424053643, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424053643, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424053643, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime60);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test253"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    server0.setTime(iTime16);
    java.lang.String str18 = server0.toString();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeBan(iP19);
    java.lang.String str21 = server0.toString();
    long long22 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424053662, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424053662, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424053662L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 0L);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test254"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.ITime iTime7 = server0.getTime();
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    tp2.IP iP12 = null;
    boolean b13 = server8.removeException(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server8.setTime(iTime16);
    tp2.ITime iTime18 = server8.getTime();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    tp2.IP iP23 = null;
    boolean b24 = server19.removeException(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server19.setTime(iTime27);
    server8.setTime(iTime27);
    long long30 = server8.getLastUpdate();
    java.lang.String str31 = server8.toString();
    tp2.IP iP32 = null;
    boolean b33 = server8.addBan(iP32);
    tp2.ITime iTime34 = server8.getTime();
    server0.setTime(iTime34);
    tp2.IP iP36 = null;
    boolean b37 = server0.removeException(iP36);
    tp2.IP iP38 = null;
    boolean b39 = server0.removeBan(iP38);
    boolean b40 = server0.repOK();
    boolean b41 = server0.repOK();
    tp2.ITime iTime42 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 1465424053664L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=1465424053664, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=1465424053664, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test255"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.addBan(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    server0.update();
    server0.update();
    tp2.IP iP13 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b14 = server0.addException(iP13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test256"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test257"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    long long11 = server0.getLastUpdate();
    tp2.ITime iTime12 = server0.getTime();
    tp2.ITime iTime13 = server0.getTime();
    server0.update();
    tp2.IP iP15 = null;
    boolean b16 = server0.addBan(iP15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053675L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test258"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    boolean b4 = server0.repOK();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test259"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    tp2.ITime iTime8 = server0.getTime();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    boolean b13 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053677, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053677, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test260"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    boolean b30 = server0.repOK();
    server0.update();
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.ITime iTime34 = server32.getTime();
    tp2.IP iP35 = null;
    boolean b36 = server32.addBan(iP35);
    tp2.ITime iTime37 = server32.getTime();
    tp2.ITime iTime38 = server32.getTime();
    tp2.IP iP39 = null;
    boolean b40 = server32.removeException(iP39);
    java.lang.String str41 = server32.toString();
    tp2.IP iP42 = null;
    boolean b43 = server32.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    tp2.IP iP48 = null;
    boolean b49 = server44.removeException(iP48);
    boolean b50 = server44.repOK();
    tp2.IP iP51 = null;
    boolean b52 = server44.removeException(iP51);
    tp2.IP iP53 = null;
    boolean b54 = server44.connect(iP53);
    tp2.ITime iTime55 = server44.getTime();
    server32.setTime(iTime55);
    server0.setTime(iTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053678, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053678, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424113679]]}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424113679]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test261"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    java.lang.String str13 = server0.toString();
    boolean b14 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053695, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053695, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053695L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424053695L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424053695, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424053695, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test262"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    java.lang.String str11 = server0.toString();
    tp2.ITime iTime12 = null;
    server0.setTime(iTime12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053695, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053695, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424053695, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424053695, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test263"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    boolean b8 = server0.repOK();
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.ITime iTime11 = server9.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server9.addBan(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server9.removeException(iP14);
    long long16 = server9.getLastUpdate();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.IP iP25 = null;
    boolean b26 = server21.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server21.setTime(iTime29);
    server17.setTime(iTime29);
    server9.setTime(iTime29);
    long long33 = server9.getLastUpdate();
    tp2.ITime iTime34 = server9.getTime();
    server0.setTime(iTime34);
    tp2.IP iP36 = null;
    boolean b37 = server0.connect(iP36);
    server0.update();
    server0.update();
    tp2.IP iP40 = null;
    boolean b41 = server0.connect(iP40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053696, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053696, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053696L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053696L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test264"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeBan(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test265"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.ITime iTime11 = server0.getTime();
    tp2.ITime iTime12 = server0.getTime();
    server0.update();
    long long14 = server0.getLastUpdate();
    long long15 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424053704L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424053704L);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test266"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    java.lang.String str12 = server8.toString();
    long long13 = server8.getLastUpdate();
    tp2.ITime iTime14 = server8.getTime();
    boolean b15 = server8.repOK();
    tp2.ITime iTime16 = server8.getTime();
    server8.update();
    tp2.ITime iTime18 = server8.getTime();
    server0.setTime(iTime18);
    long long20 = server0.getLastUpdate();
    java.lang.String str21 = server0.toString();
    tp2.ITime iTime22 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053705, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053705, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424053706, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424053706, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424053706L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 1465424053705L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424053705, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424053705, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test267"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    server0.update();
    boolean b15 = server0.repOK();
    tp2.IP iP16 = null;
    boolean b17 = server0.connect(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test268"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    long long11 = server0.getLastUpdate();
    tp2.ITime iTime12 = server0.getTime();
    tp2.ITime iTime13 = server0.getTime();
    long long14 = server0.getLastUpdate();
    boolean b15 = server0.repOK();
    long long16 = server0.getLastUpdate();
    boolean b17 = server0.repOK();
    java.lang.String str18 = server0.toString();
    tp2.IP iP19 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b20 = server0.addException(iP19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424053712L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424053712L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053712L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465424053712, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465424053712, exceptions=(), bans={}]"));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test269"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    server0.update();
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    long long21 = server11.getLastUpdate();
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    java.lang.String str26 = server22.toString();
    tp2.IP iP27 = null;
    boolean b28 = server22.removeBan(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    tp2.ITime iTime39 = server29.getTime();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    server29.setTime(iTime48);
    server22.setTime(iTime48);
    server11.setTime(iTime48);
    tp2.ITime iTime53 = server11.getTime();
    server0.setTime(iTime53);
    long long55 = server0.getLastUpdate();
    tp2.ITime iTime56 = server0.getTime();
    tp2.ITime iTime57 = server0.getTime();
    tp2.IP iP58 = null;
    boolean b59 = server0.connect(iP58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053713, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053713, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424053713, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424053713, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424053714L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424053714, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424053714, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long55 == 1465424053713L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test270"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    long long16 = server11.getLastUpdate();
    long long17 = server11.getLastUpdate();
    tp2.IP iP18 = null;
    boolean b19 = server11.removeException(iP18);
    tp2.ITime iTime20 = server11.getTime();
    server11.update();
    tp2.IP iP22 = null;
    boolean b23 = server11.connect(iP22);
    tp2.IP iP24 = null;
    boolean b25 = server11.removeException(iP24);
    tp2.ITime iTime26 = server11.getTime();
    server0.setTime(iTime26);
    tp2.IP iP28 = null;
    boolean b29 = server0.connect(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    tp2.IP iP35 = null;
    boolean b36 = server30.removeBan(iP35);
    tp2.ITime iTime37 = server30.getTime();
    java.lang.String str38 = server30.toString();
    tp2.IP iP39 = null;
    boolean b40 = server30.removeBan(iP39);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.ITime iTime47 = server45.getTime();
    server45.update();
    tp2.IP iP49 = null;
    boolean b50 = server45.removeException(iP49);
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    tp2.ITime iTime53 = server51.getTime();
    server45.setTime(iTime53);
    server41.setTime(iTime53);
    tp2.IP iP56 = null;
    boolean b57 = server41.removeBan(iP56);
    tp2.ITime iTime58 = server41.getTime();
    tp2.IP iP59 = null;
    boolean b60 = server41.removeException(iP59);
    tp2.IP iP61 = null;
    boolean b62 = server41.removeBan(iP61);
    tp2.ITime iTime63 = server41.getTime();
    server30.setTime(iTime63);
    server0.setTime(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053733, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053733, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053733L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424053733L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424053734, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424053734, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=1465424053734, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=1465424053734, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test271"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    long long30 = server0.getLastUpdate();
    long long31 = server0.getLastUpdate();
    tp2.IP iP32 = null;
    boolean b33 = server0.removeException(iP32);
    boolean b34 = server0.repOK();
    tp2.IP iP35 = null;
    boolean b36 = server0.addBan(iP35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053753, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053753, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 1465424053753L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1465424053753L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test272"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    java.lang.String str6 = server0.toString();
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.addBan(iP8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=1465424053767, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=1465424053767, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053767L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test273"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    boolean b4 = server0.repOK();
    boolean b5 = server0.repOK();
    long long6 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test274"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.ITime iTime13 = null;
    server0.setTime(iTime13);
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server15.addBan(iP18);
    tp2.IP iP20 = null;
    boolean b21 = server15.removeException(iP20);
    long long22 = server15.getLastUpdate();
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server23.setTime(iTime35);
    server15.setTime(iTime35);
    server0.setTime(iTime35);
    boolean b40 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053768L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test275"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    long long16 = server10.getLastUpdate();
    server10.update();
    boolean b18 = server10.repOK();
    tp2.ITime iTime19 = server10.getTime();
    tp2.ITime iTime20 = server10.getTime();
    server0.setTime(iTime20);
    java.lang.String str22 = server0.toString();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424053775, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424053775, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424053775, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424053775, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424053775L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053775L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424053775, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424053775, exceptions=(), bans={}]"));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test276"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.connect(iP18);
    tp2.ITime iTime20 = server0.getTime();
    boolean b21 = server0.repOK();
    tp2.IP iP22 = null;
    boolean b23 = server0.addBan(iP22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test277"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.IP iP17 = null;
    boolean b18 = server0.connect(iP17);
    tp2.IP iP19 = null;
    boolean b20 = server0.addBan(iP19);
    long long21 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP23 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b24 = server0.connect(iP23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424053780L);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test278"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test279"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    boolean b15 = server0.repOK();
    tp2.ITime iTime16 = server0.getTime();
    tp2.IP iP17 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b18 = server0.addException(iP17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053781, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053781, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053781L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test280"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    tp2.IP iP37 = null;
    boolean b38 = server0.removeException(iP37);
    long long39 = server0.getLastUpdate();
    java.lang.String str40 = server0.toString();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    java.lang.String str45 = server41.toString();
    tp2.IP iP46 = null;
    boolean b47 = server41.removeBan(iP46);
    tp2.ITime iTime48 = server41.getTime();
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server49.update();
    tp2.IP iP53 = null;
    boolean b54 = server49.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    tp2.ITime iTime57 = server55.getTime();
    server49.setTime(iTime57);
    tp2.ITime iTime59 = server49.getTime();
    server41.setTime(iTime59);
    server0.setTime(iTime59);
    server0.update();
    tp2.IP iP63 = null;
    boolean b64 = server0.removeException(iP63);
    boolean b65 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long39 == 1465424053784L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424053784, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424053784, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465424053786, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=1465424053786, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test281"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    long long18 = server0.getLastUpdate();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    tp2.ITime iTime26 = server19.getTime();
    server0.setTime(iTime26);
    tp2.ITime iTime28 = server0.getTime();
    boolean b29 = server0.repOK();
    server0.update();
    server0.update();
    long long32 = server0.getLastUpdate();
    java.lang.String str33 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424053811L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424053812, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424053812, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424053812L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 1465424053812L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=1465424053812, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=1465424053812, exceptions=(), bans={}]"));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test282"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.ITime iTime9 = server0.getTime();
    boolean b10 = server0.repOK();
    tp2.ITime iTime11 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053821, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053821, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053821L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test283"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    boolean b16 = server0.repOK();
    boolean b17 = server0.repOK();
    tp2.IP iP18 = null;
    boolean b19 = server0.connect(iP18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test284"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    tp2.ITime iTime28 = server18.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server18.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.ITime iTime42 = server0.getTime();
    tp2.IP iP43 = null;
    boolean b44 = server0.addBan(iP43);
    boolean b45 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053827L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053828, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053828, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test285"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    long long16 = server11.getLastUpdate();
    tp2.ITime iTime17 = server11.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server11.removeBan(iP18);
    boolean b20 = server11.repOK();
    long long21 = server11.getLastUpdate();
    server11.update();
    tp2.ITime iTime23 = server11.getTime();
    server0.setTime(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053849, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053849, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424053849L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424053849L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test286"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    long long18 = server0.getLastUpdate();
    tp2.ITime iTime19 = server0.getTime();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    tp2.IP iP24 = null;
    boolean b25 = server20.removeException(iP24);
    boolean b26 = server20.repOK();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server20.setTime(iTime35);
    server0.setTime(iTime35);
    java.lang.String str39 = server0.toString();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    tp2.ITime iTime50 = server40.getTime();
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    tp2.ITime iTime53 = server51.getTime();
    server51.update();
    tp2.IP iP55 = null;
    boolean b56 = server51.removeException(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.ITime iTime59 = server57.getTime();
    server51.setTime(iTime59);
    server40.setTime(iTime59);
    long long62 = server40.getLastUpdate();
    boolean b63 = server40.repOK();
    tp2.IP iP64 = null;
    boolean b65 = server40.removeException(iP64);
    tp2.IP iP66 = null;
    boolean b67 = server40.connect(iP66);
    tp2.ITime iTime68 = server40.getTime();
    server0.setTime(iTime68);
    boolean b70 = server0.repOK();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424053855L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424053855, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424053855, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1465424053859L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test287"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.connect(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    java.lang.String str18 = server14.toString();
    tp2.ITime iTime19 = server14.getTime();
    server14.update();
    server14.update();
    tp2.IP iP22 = null;
    boolean b23 = server14.connect(iP22);
    java.lang.String str24 = server14.toString();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    long long35 = server25.getLastUpdate();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    java.lang.String str40 = server36.toString();
    tp2.IP iP41 = null;
    boolean b42 = server36.removeBan(iP41);
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server43.update();
    tp2.IP iP47 = null;
    boolean b48 = server43.removeException(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server43.setTime(iTime51);
    tp2.ITime iTime53 = server43.getTime();
    tp2.Server server54 = new tp2.Server();
    java.lang.String str55 = server54.toString();
    tp2.ITime iTime56 = server54.getTime();
    server54.update();
    tp2.IP iP58 = null;
    boolean b59 = server54.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    tp2.ITime iTime62 = server60.getTime();
    server54.setTime(iTime62);
    server43.setTime(iTime62);
    server36.setTime(iTime62);
    server25.setTime(iTime62);
    tp2.ITime iTime67 = server25.getTime();
    server14.setTime(iTime67);
    server0.setTime(iTime67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465424053897, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465424053897, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424053897, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=1465424053897, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424053898L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424053898, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424053898, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime67);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test288"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    long long8 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424053928L);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test289"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    tp2.ITime iTime28 = server18.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server18.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.ITime iTime42 = server0.getTime();
    server0.update();
    boolean b44 = server0.repOK();
    tp2.IP iP45 = null;
    boolean b46 = server0.connect(iP45);
    server0.update();
    long long48 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424053929L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053929, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053929, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 1465424053931L);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test290"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    java.lang.String str11 = server7.toString();
    tp2.IP iP12 = null;
    boolean b13 = server7.removeBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.IP iP18 = null;
    boolean b19 = server14.removeException(iP18);
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server14.setTime(iTime22);
    tp2.ITime iTime24 = server14.getTime();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server14.setTime(iTime33);
    server7.setTime(iTime33);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    long long42 = server37.getLastUpdate();
    long long43 = server37.getLastUpdate();
    tp2.IP iP44 = null;
    boolean b45 = server37.removeException(iP44);
    java.lang.String str46 = server37.toString();
    tp2.IP iP47 = null;
    boolean b48 = server37.addBan(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.IP iP51 = null;
    boolean b52 = server49.removeException(iP51);
    tp2.ITime iTime53 = server49.getTime();
    server37.setTime(iTime53);
    server7.setTime(iTime53);
    tp2.ITime iTime56 = server7.getTime();
    server0.setTime(iTime56);
    tp2.IP iP58 = null;
    boolean b59 = server0.removeException(iP58);
    long long60 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053947, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053947, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053947L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=1465424053948, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=1465424053948, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424053950, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424053950, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1465424053950L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long43 == 1465424053950L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=1465424053950, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=1465424053950, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 1465424053948L);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test291"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    tp2.ITime iTime12 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test292"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    java.lang.String str11 = server0.toString();
    tp2.IP iP12 = null;
    boolean b13 = server0.connect(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    tp2.IP iP16 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b17 = server0.addException(iP16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test293"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053976, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053976, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053976L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test294"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    long long7 = server0.getLastUpdate();
    long long8 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeException(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.addBan(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053978, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053978, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053978L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424053978L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 1465424053978L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test295"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    boolean b3 = server0.repOK();
    long long4 = server0.getLastUpdate();
    boolean b5 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test296"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    server0.update();
    long long12 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053979, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053979, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053979L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424053980L);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test297"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    long long9 = server0.getLastUpdate();
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.ITime iTime16 = server11.getTime();
    server11.update();
    server11.update();
    tp2.IP iP19 = null;
    boolean b20 = server11.connect(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.IP iP25 = null;
    boolean b26 = server21.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server21.setTime(iTime29);
    server21.update();
    tp2.ITime iTime32 = server21.getTime();
    tp2.IP iP33 = null;
    boolean b34 = server21.removeException(iP33);
    java.lang.String str35 = server21.toString();
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    server36.setTime(iTime48);
    tp2.IP iP51 = null;
    boolean b52 = server36.removeBan(iP51);
    tp2.ITime iTime53 = server36.getTime();
    server21.setTime(iTime53);
    server21.update();
    tp2.ITime iTime56 = server21.getTime();
    server11.setTime(iTime56);
    server0.setTime(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424053981, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424053981, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424053981L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424053981L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424053981, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424053981, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424053981, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424053981, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=1465424053983, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=1465424053983, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test298"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test299"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    server0.update();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    long long25 = server19.getLastUpdate();
    tp2.IP iP26 = null;
    boolean b27 = server19.connect(iP26);
    tp2.IP iP28 = null;
    boolean b29 = server19.removeBan(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server19.setTime(iTime32);
    server0.setTime(iTime32);
    tp2.IP iP35 = null;
    boolean b36 = server0.connect(iP35);
    server0.update();
    tp2.Server server38 = new tp2.Server();
    java.lang.String str39 = server38.toString();
    tp2.ITime iTime40 = server38.getTime();
    server38.update();
    tp2.IP iP42 = null;
    boolean b43 = server38.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server38.setTime(iTime46);
    tp2.ITime iTime48 = server38.getTime();
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server49.update();
    tp2.IP iP53 = null;
    boolean b54 = server49.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    tp2.ITime iTime57 = server55.getTime();
    server49.setTime(iTime57);
    server38.setTime(iTime57);
    long long60 = server38.getLastUpdate();
    boolean b61 = server38.repOK();
    tp2.IP iP62 = null;
    boolean b63 = server38.removeException(iP62);
    tp2.IP iP64 = null;
    boolean b65 = server38.removeBan(iP64);
    tp2.ITime iTime66 = server38.getTime();
    server0.setTime(iTime66);
    tp2.ITime iTime68 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424054008, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424054008, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424054008L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424054008L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 1465424054010L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime68);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test300"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    long long16 = server0.getLastUpdate();
    tp2.ITime iTime17 = server0.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    java.lang.String str22 = server18.toString();
    long long23 = server18.getLastUpdate();
    long long24 = server18.getLastUpdate();
    tp2.IP iP25 = null;
    boolean b26 = server18.removeException(iP25);
    java.lang.String str27 = server18.toString();
    boolean b28 = server18.repOK();
    tp2.IP iP29 = null;
    boolean b30 = server18.connect(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server31.update();
    tp2.IP iP35 = null;
    boolean b36 = server31.addBan(iP35);
    tp2.ITime iTime37 = server31.getTime();
    server18.setTime(iTime37);
    server0.setTime(iTime37);
    boolean b40 = server0.repOK();
    tp2.ITime iTime41 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424054041L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424054042, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424054042, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 1465424054042L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424054042L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Server [lastUpdate=1465424054042, exceptions=(), bans={}]"+ "'", str27.equals("Server [lastUpdate=1465424054042, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test301"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    long long11 = server0.getLastUpdate();
    tp2.ITime iTime12 = server0.getTime();
    tp2.ITime iTime13 = server0.getTime();
    long long14 = server0.getLastUpdate();
    boolean b15 = server0.repOK();
    long long16 = server0.getLastUpdate();
    tp2.IP iP17 = null;
    boolean b18 = server0.connect(iP17);
    long long19 = server0.getLastUpdate();
    tp2.IP iP20 = null;
    boolean b21 = server0.connect(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054053L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424054053L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424054053L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1465424054053L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test302"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.ITime iTime7 = server0.getTime();
    long long8 = server0.getLastUpdate();
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server14.setTime(iTime26);
    tp2.IP iP29 = null;
    boolean b30 = server14.removeBan(iP29);
    tp2.ITime iTime31 = server14.getTime();
    tp2.IP iP32 = null;
    boolean b33 = server14.removeException(iP32);
    tp2.IP iP34 = null;
    boolean b35 = server14.removeBan(iP34);
    tp2.ITime iTime36 = server14.getTime();
    server0.setTime(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test303"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    long long18 = server0.getLastUpdate();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    tp2.ITime iTime26 = server19.getTime();
    server0.setTime(iTime26);
    long long28 = server0.getLastUpdate();
    long long29 = server0.getLastUpdate();
    tp2.IP iP30 = null;
    boolean b31 = server0.removeException(iP30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424054067L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424054068, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424054068, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424054068L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1465424054067L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424054067L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test304"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.connect(iP12);
    tp2.IP iP14 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b15 = server0.addException(iP14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test305"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    long long9 = server0.getLastUpdate();
    tp2.IP iP10 = null;
    boolean b11 = server0.removeBan(iP10);
    tp2.ITime iTime12 = server0.getTime();
    tp2.IP iP13 = null;
    boolean b14 = server0.removeBan(iP13);
    java.lang.String str15 = server0.toString();
    tp2.IP iP16 = null;
    boolean b17 = server0.connect(iP16);
    tp2.IP iP18 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b19 = server0.addException(iP18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test306"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    server0.update();
    server0.update();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    long long21 = server11.getLastUpdate();
    tp2.Server server22 = new tp2.Server();
    java.lang.String str23 = server22.toString();
    tp2.ITime iTime24 = server22.getTime();
    server22.update();
    java.lang.String str26 = server22.toString();
    tp2.IP iP27 = null;
    boolean b28 = server22.removeBan(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    tp2.ITime iTime39 = server29.getTime();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    server29.setTime(iTime48);
    server22.setTime(iTime48);
    server11.setTime(iTime48);
    tp2.ITime iTime53 = server11.getTime();
    server0.setTime(iTime53);
    java.lang.String str55 = server0.toString();
    server0.update();
    boolean b57 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054076, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054076, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424054076, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424054076, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424054076L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424054077, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424054077, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=1465424054076, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=1465424054076, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test307"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.ITime iTime9 = server0.getTime();
    server0.update();
    boolean b11 = server0.repOK();
    tp2.ITime iTime12 = server0.getTime();
    server0.update();
    java.lang.String str14 = server0.toString();
    tp2.ITime iTime15 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054096, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054096, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054096L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424054096L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054098, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054098, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test308"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.IP iP19 = null;
    boolean b20 = server15.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server15.setTime(iTime23);
    tp2.ITime iTime25 = server15.getTime();
    server11.setTime(iTime25);
    boolean b27 = server11.repOK();
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    tp2.IP iP30 = null;
    boolean b31 = server28.removeException(iP30);
    tp2.IP iP32 = null;
    boolean b33 = server28.connect(iP32);
    long long34 = server28.getLastUpdate();
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server35.update();
    tp2.IP iP39 = null;
    boolean b40 = server35.removeException(iP39);
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server35.setTime(iTime43);
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.ITime iTime49 = server47.getTime();
    server47.update();
    java.lang.String str51 = server47.toString();
    long long52 = server47.getLastUpdate();
    tp2.ITime iTime53 = server47.getTime();
    server45.setTime(iTime53);
    server35.setTime(iTime53);
    server28.setTime(iTime53);
    server11.setTime(iTime53);
    server0.setTime(iTime53);
    java.lang.String str59 = server0.toString();
    tp2.IP iP60 = null;
    boolean b61 = server0.removeException(iP60);
    java.lang.String str62 = server0.toString();
    long long63 = server0.getLastUpdate();
    tp2.Server server64 = new tp2.Server();
    java.lang.String str65 = server64.toString();
    tp2.ITime iTime66 = server64.getTime();
    server64.update();
    java.lang.String str68 = server64.toString();
    tp2.ITime iTime69 = server64.getTime();
    tp2.IP iP70 = null;
    boolean b71 = server64.removeBan(iP70);
    java.lang.String str72 = server64.toString();
    tp2.IP iP73 = null;
    boolean b74 = server64.addBan(iP73);
    tp2.ITime iTime75 = server64.getTime();
    server0.setTime(iTime75);
    tp2.IP iP77 = null;
    boolean b78 = server0.connect(iP77);
    tp2.IP iP79 = null;
    boolean b80 = server0.removeBan(iP79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Server [lastUpdate=1465424054102, exceptions=(), bans={}]"+ "'", str51.equals("Server [lastUpdate=1465424054102, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long52 == 1465424054102L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Server [lastUpdate=1465424054101, exceptions=(), bans={}]"+ "'", str59.equals("Server [lastUpdate=1465424054101, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Server [lastUpdate=1465424054101, exceptions=(), bans={}]"+ "'", str62.equals("Server [lastUpdate=1465424054101, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 1465424054101L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str65.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Server [lastUpdate=1465424054103, exceptions=(), bans={}]"+ "'", str68.equals("Server [lastUpdate=1465424054103, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=1465424054103, exceptions=(), bans={}]"+ "'", str72.equals("Server [lastUpdate=1465424054103, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test309"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    long long10 = server5.getLastUpdate();
    tp2.ITime iTime11 = server5.getTime();
    boolean b12 = server5.repOK();
    tp2.ITime iTime13 = server5.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054129, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054129, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424054129L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test310"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.IP iP18 = null;
    boolean b19 = server14.removeException(iP18);
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server14.setTime(iTime22);
    tp2.ITime iTime24 = server14.getTime();
    server10.setTime(iTime24);
    server0.setTime(iTime24);
    tp2.ITime iTime27 = server0.getTime();
    tp2.IP iP28 = null;
    boolean b29 = server0.removeException(iP28);
    long long30 = server0.getLastUpdate();
    boolean b31 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test311"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.connect(iP13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054139, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054139, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424054139L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test312"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    server0.update();
    boolean b7 = server0.repOK();
    boolean b8 = server0.repOK();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test313"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    java.lang.String str14 = server0.toString();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    tp2.IP iP23 = null;
    boolean b24 = server19.removeException(iP23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server19.setTime(iTime27);
    server15.setTime(iTime27);
    tp2.IP iP30 = null;
    boolean b31 = server15.removeBan(iP30);
    tp2.ITime iTime32 = server15.getTime();
    server0.setTime(iTime32);
    server0.update();
    boolean b35 = server0.repOK();
    java.lang.String str36 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054143, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054143, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=1465424054144, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=1465424054144, exceptions=(), bans={}]"));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test314"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test315"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    long long10 = server0.getLastUpdate();
    boolean b11 = server0.repOK();
    long long12 = server0.getLastUpdate();
    tp2.ITime iTime13 = server0.getTime();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    java.lang.String str18 = server14.toString();
    long long19 = server14.getLastUpdate();
    server14.update();
    long long21 = server14.getLastUpdate();
    server14.update();
    tp2.IP iP23 = null;
    boolean b24 = server14.connect(iP23);
    tp2.ITime iTime25 = server14.getTime();
    tp2.ITime iTime26 = server14.getTime();
    tp2.ITime iTime27 = server14.getTime();
    tp2.ITime iTime28 = server14.getTime();
    server0.setTime(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054152, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054152, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424054152L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424054152L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424054152L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=1465424054152, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=1465424054152, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1465424054152L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424054153L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test316"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    long long9 = server0.getLastUpdate();
    tp2.ITime iTime10 = server0.getTime();
    long long11 = server0.getLastUpdate();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424054158L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054158L);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test317"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    java.lang.String str4 = server0.toString();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    tp2.IP iP9 = null;
    boolean b10 = server5.removeException(iP9);
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server5.setTime(iTime13);
    server5.update();
    tp2.ITime iTime16 = server5.getTime();
    server0.setTime(iTime16);
    tp2.ITime iTime18 = server0.getTime();
    boolean b19 = server0.repOK();
    tp2.IP iP20 = null;
    boolean b21 = server0.connect(iP20);
    boolean b22 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test318"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b9 = server0.removeBan(iP8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test319"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    java.lang.String str10 = server0.toString();
    long long11 = server0.getLastUpdate();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    boolean b18 = server12.repOK();
    tp2.IP iP19 = null;
    boolean b20 = server12.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    java.lang.String str25 = server21.toString();
    tp2.IP iP26 = null;
    boolean b27 = server21.removeBan(iP26);
    tp2.Server server28 = new tp2.Server();
    java.lang.String str29 = server28.toString();
    tp2.ITime iTime30 = server28.getTime();
    server28.update();
    tp2.IP iP32 = null;
    boolean b33 = server28.removeException(iP32);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    tp2.ITime iTime36 = server34.getTime();
    server28.setTime(iTime36);
    tp2.ITime iTime38 = server28.getTime();
    tp2.Server server39 = new tp2.Server();
    java.lang.String str40 = server39.toString();
    tp2.ITime iTime41 = server39.getTime();
    server39.update();
    tp2.IP iP43 = null;
    boolean b44 = server39.removeException(iP43);
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.ITime iTime47 = server45.getTime();
    server39.setTime(iTime47);
    server28.setTime(iTime47);
    server21.setTime(iTime47);
    server12.setTime(iTime47);
    java.lang.String str52 = server12.toString();
    tp2.Server server53 = new tp2.Server();
    java.lang.String str54 = server53.toString();
    tp2.ITime iTime55 = server53.getTime();
    tp2.IP iP56 = null;
    boolean b57 = server53.addBan(iP56);
    tp2.IP iP58 = null;
    boolean b59 = server53.removeException(iP58);
    long long60 = server53.getLastUpdate();
    tp2.ITime iTime61 = server53.getTime();
    server12.setTime(iTime61);
    server0.setTime(iTime61);
    tp2.IP iP64 = null;
    boolean b65 = server0.removeException(iP64);
    server0.update();
    long long67 = server0.getLastUpdate();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424054166, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=1465424054166, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str29.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=1465424054165, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=1465424054165, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str54.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 1465424054169L);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test320"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    java.lang.String str13 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424054188, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424054188, exceptions=(), bans={}]"));

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test321"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.IP iP8 = null;
    boolean b9 = server0.addBan(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    server15.update();
    tp2.IP iP19 = null;
    boolean b20 = server15.removeException(iP19);
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server15.setTime(iTime23);
    server11.setTime(iTime23);
    tp2.IP iP26 = null;
    boolean b27 = server11.removeBan(iP26);
    tp2.ITime iTime28 = server11.getTime();
    long long29 = server11.getLastUpdate();
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    long long35 = server30.getLastUpdate();
    tp2.ITime iTime36 = server30.getTime();
    tp2.ITime iTime37 = server30.getTime();
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.IP iP40 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b41 = server0.addException(iP40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054188, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054188, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054188L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 1465424054189L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424054190, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424054190, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424054190L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test322"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.ITime iTime22 = server0.getTime();
    tp2.IP iP23 = null;
    boolean b24 = server0.addBan(iP23);
    tp2.ITime iTime25 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test323"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    long long18 = server0.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeBan(iP19);
    server0.update();
    java.lang.String str22 = server0.toString();
    java.lang.String str23 = server0.toString();
    tp2.ITime iTime24 = server0.getTime();
    tp2.IP iP25 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b26 = server0.addException(iP25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424054204L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424054205, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424054205, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424054205, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424054205, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test324"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server12.setTime(iTime20);
    server8.setTime(iTime20);
    server0.setTime(iTime20);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.IP iP26 = null;
    boolean b27 = server24.removeException(iP26);
    tp2.ITime iTime28 = server24.getTime();
    server0.setTime(iTime28);
    tp2.ITime iTime30 = server0.getTime();
    boolean b31 = server0.repOK();
    boolean b32 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test325"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    server0.update();
    tp2.IP iP19 = null;
    boolean b20 = server0.addBan(iP19);
    tp2.IP iP21 = null;
    boolean b22 = server0.removeException(iP21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test326"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    tp2.ITime iTime28 = server18.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server18.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.ITime iTime42 = server0.getTime();
    server0.update();
    long long44 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424054221L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424054221, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424054221, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 1465424054223L);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test327"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.connect(iP9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054239, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054239, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054239L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test328"); }


    tp2.Server server0 = new tp2.Server();
    server0.update();
    long long2 = server0.getLastUpdate();
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    long long5 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1465424054240L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054240L);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test329"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    server0.setTime(iTime16);
    tp2.ITime iTime18 = server0.getTime();
    tp2.IP iP19 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b20 = server0.addException(iP19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054242, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054242, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424054242L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test330"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.connect(iP2);
    long long4 = server0.getLastUpdate();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server6.update();
    java.lang.String str10 = server6.toString();
    long long11 = server6.getLastUpdate();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    java.lang.String str16 = server12.toString();
    long long17 = server12.getLastUpdate();
    long long18 = server12.getLastUpdate();
    tp2.IP iP19 = null;
    boolean b20 = server12.removeException(iP19);
    java.lang.String str21 = server12.toString();
    tp2.IP iP22 = null;
    boolean b23 = server12.addBan(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    tp2.IP iP27 = null;
    boolean b28 = server24.addBan(iP27);
    tp2.ITime iTime29 = server24.getTime();
    server12.setTime(iTime29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server31.update();
    tp2.IP iP35 = null;
    boolean b36 = server31.removeException(iP35);
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server31.setTime(iTime39);
    server31.update();
    tp2.ITime iTime42 = server31.getTime();
    tp2.ITime iTime43 = server31.getTime();
    server12.setTime(iTime43);
    server6.setTime(iTime43);
    server0.setTime(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424054243, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424054243, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054243L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465424054243, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465424054243, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424054243L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424054243L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424054243, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424054243, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test331"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.connect(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.removeBan(iP4);
    java.lang.String str6 = server0.toString();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    long long16 = server10.getLastUpdate();
    server10.update();
    tp2.IP iP18 = null;
    boolean b19 = server10.addBan(iP18);
    tp2.ITime iTime20 = server10.getTime();
    server0.setTime(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054257, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054257, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424054257L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 1465424054257L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test332"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    boolean b6 = server0.repOK();
    java.lang.String str7 = server0.toString();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.ITime iTime11 = server0.getTime();
    long long12 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=1465424054260, exceptions=(), bans={[IPBan [ip=null, expires=1465424114260]]}]"+ "'", str7.equals("Server [lastUpdate=1465424054260, exceptions=(), bans={[IPBan [ip=null, expires=1465424114260]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424054260L);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test333"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    server0.update();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.ITime iTime13 = server0.getTime();
    tp2.IP iP14 = null;
    boolean b15 = server0.removeBan(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test334"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    boolean b9 = server0.repOK();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.addBan(iP11);
    server0.update();
    long long14 = server0.getLastUpdate();
    long long15 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054266, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054266, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054266L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424054267L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424054267L);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test335"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.ITime iTime6 = server0.getTime();
    boolean b7 = server0.repOK();
    tp2.ITime iTime8 = server0.getTime();
    server0.update();
    tp2.ITime iTime10 = server0.getTime();
    tp2.IP iP11 = null;
    boolean b12 = server0.removeBan(iP11);
    long long13 = server0.getLastUpdate();
    java.lang.String str14 = server0.toString();
    server0.update();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    tp2.IP iP18 = null;
    boolean b19 = server0.removeBan(iP18);
    tp2.IP iP20 = null;
    boolean b21 = server0.removeBan(iP20);
    java.lang.String str22 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054268, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054268, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054268L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424054268L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054268, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054268, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=1465424054268, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=1465424054268, exceptions=(), bans={}]"));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test336"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    server0.update();
    tp2.ITime iTime15 = server0.getTime();
    tp2.Server server16 = new tp2.Server();
    java.lang.String str17 = server16.toString();
    tp2.ITime iTime18 = server16.getTime();
    server16.update();
    tp2.IP iP20 = null;
    boolean b21 = server16.removeException(iP20);
    boolean b22 = server16.repOK();
    tp2.IP iP23 = null;
    boolean b24 = server16.connect(iP23);
    tp2.IP iP25 = null;
    boolean b26 = server16.addBan(iP25);
    server16.update();
    long long28 = server16.getLastUpdate();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server29.update();
    tp2.ITime iTime40 = server29.getTime();
    server16.setTime(iTime40);
    server0.setTime(iTime40);
    tp2.IP iP43 = null;
    boolean b44 = server0.connect(iP43);
    tp2.IP iP45 = null;
    boolean b46 = server0.addBan(iP45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1465424054273L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test337"); }


    tp2.Server server0 = new tp2.Server();
    long long1 = server0.getLastUpdate();
    java.lang.String str2 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str2.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test338"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    long long18 = server0.getLastUpdate();
    tp2.ITime iTime19 = server0.getTime();
    tp2.IP iP20 = null;
    boolean b21 = server0.removeException(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424054286L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test339"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    long long10 = server0.getLastUpdate();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.IP iP16 = null;
    boolean b17 = server11.removeBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    tp2.ITime iTime28 = server18.getTime();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    tp2.IP iP33 = null;
    boolean b34 = server29.removeException(iP33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server29.setTime(iTime37);
    server18.setTime(iTime37);
    server11.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.ITime iTime42 = server0.getTime();
    tp2.IP iP43 = null;
    boolean b44 = server0.addBan(iP43);
    long long45 = server0.getLastUpdate();
    tp2.ITime iTime46 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424054291L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424054293, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424054293, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 1465424054291L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test340"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    tp2.ITime iTime7 = server0.getTime();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    server0.setTime(iTime16);
    tp2.IP iP18 = null;
    boolean b19 = server0.removeBan(iP18);
    long long20 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054315, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054315, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424054315L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 0L);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test341"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    java.lang.String str12 = server8.toString();
    long long13 = server8.getLastUpdate();
    long long14 = server8.getLastUpdate();
    tp2.Server server15 = new tp2.Server();
    java.lang.String str16 = server15.toString();
    tp2.ITime iTime17 = server15.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server15.addBan(iP18);
    tp2.ITime iTime20 = server15.getTime();
    server8.setTime(iTime20);
    server0.setTime(iTime20);
    tp2.ITime iTime23 = server0.getTime();
    boolean b24 = server0.repOK();
    tp2.IP iP25 = null;
    boolean b26 = server0.removeException(iP25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054318, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054318, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424054318, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424054318, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424054318L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424054318L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test342"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server6.update();
    java.lang.String str10 = server6.toString();
    long long11 = server6.getLastUpdate();
    long long12 = server6.getLastUpdate();
    tp2.IP iP13 = null;
    boolean b14 = server6.removeException(iP13);
    java.lang.String str15 = server6.toString();
    tp2.IP iP16 = null;
    boolean b17 = server6.addBan(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server18.addBan(iP21);
    tp2.ITime iTime23 = server18.getTime();
    server6.setTime(iTime23);
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    server25.update();
    tp2.ITime iTime36 = server25.getTime();
    tp2.ITime iTime37 = server25.getTime();
    server6.setTime(iTime37);
    server0.setTime(iTime37);
    tp2.IP iP40 = null;
    boolean b41 = server0.removeBan(iP40);
    tp2.ITime iTime42 = server0.getTime();
    tp2.ITime iTime43 = server0.getTime();
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.IP iP46 = null;
    boolean b47 = server44.removeException(iP46);
    boolean b48 = server44.repOK();
    long long49 = server44.getLastUpdate();
    tp2.IP iP50 = null;
    boolean b51 = server44.removeBan(iP50);
    tp2.IP iP52 = null;
    boolean b53 = server44.removeException(iP52);
    tp2.Server server54 = new tp2.Server();
    java.lang.String str55 = server54.toString();
    tp2.ITime iTime56 = server54.getTime();
    server54.update();
    tp2.IP iP58 = null;
    boolean b59 = server54.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    tp2.ITime iTime62 = server60.getTime();
    server54.setTime(iTime62);
    tp2.ITime iTime64 = server54.getTime();
    tp2.Server server65 = new tp2.Server();
    java.lang.String str66 = server65.toString();
    tp2.ITime iTime67 = server65.getTime();
    server65.update();
    tp2.IP iP69 = null;
    boolean b70 = server65.removeException(iP69);
    tp2.Server server71 = new tp2.Server();
    java.lang.String str72 = server71.toString();
    tp2.ITime iTime73 = server71.getTime();
    server65.setTime(iTime73);
    server54.setTime(iTime73);
    long long76 = server54.getLastUpdate();
    boolean b77 = server54.repOK();
    tp2.IP iP78 = null;
    boolean b79 = server54.removeException(iP78);
    tp2.IP iP80 = null;
    boolean b81 = server54.removeBan(iP80);
    tp2.ITime iTime82 = server54.getTime();
    server44.setTime(iTime82);
    server0.setTime(iTime82);
    java.lang.String str85 = server0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054324, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054324, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054324L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424054326, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424054326, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054326L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424054326L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424054326, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424054326, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str66.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str72.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 1465424054327L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Server [lastUpdate=1465424054324, exceptions=(), bans={}]"+ "'", str85.equals("Server [lastUpdate=1465424054324, exceptions=(), bans={}]"));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test343"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.addBan(iP6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test344"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    tp2.IP iP11 = null;
    boolean b12 = server0.connect(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server13.update();
    tp2.IP iP17 = null;
    boolean b18 = server13.addBan(iP17);
    tp2.ITime iTime19 = server13.getTime();
    server0.setTime(iTime19);
    java.lang.String str21 = server0.toString();
    tp2.IP iP22 = null;
    boolean b23 = server0.removeException(iP22);
    tp2.IP iP24 = null;
    boolean b25 = server0.removeException(iP24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054363, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054363, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054363L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424054363L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054363, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054363, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=1465424054363, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=1465424054363, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test345"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server0.setTime(iTime15);
    long long18 = server0.getLastUpdate();
    tp2.ITime iTime19 = server0.getTime();
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server20.update();
    tp2.IP iP24 = null;
    boolean b25 = server20.removeException(iP24);
    boolean b26 = server20.repOK();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server20.setTime(iTime35);
    server0.setTime(iTime35);
    java.lang.String str39 = server0.toString();
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    tp2.IP iP44 = null;
    boolean b45 = server40.removeException(iP44);
    tp2.Server server46 = new tp2.Server();
    java.lang.String str47 = server46.toString();
    tp2.ITime iTime48 = server46.getTime();
    server40.setTime(iTime48);
    tp2.ITime iTime50 = server40.getTime();
    tp2.Server server51 = new tp2.Server();
    java.lang.String str52 = server51.toString();
    tp2.ITime iTime53 = server51.getTime();
    server51.update();
    tp2.IP iP55 = null;
    boolean b56 = server51.removeException(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.ITime iTime59 = server57.getTime();
    server51.setTime(iTime59);
    server40.setTime(iTime59);
    long long62 = server40.getLastUpdate();
    boolean b63 = server40.repOK();
    tp2.IP iP64 = null;
    boolean b65 = server40.removeException(iP64);
    tp2.IP iP66 = null;
    boolean b67 = server40.connect(iP66);
    tp2.ITime iTime68 = server40.getTime();
    server0.setTime(iTime68);
    tp2.IP iP70 = null;
    boolean b71 = server0.addBan(iP70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 1465424054365L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424054365, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424054365, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str47.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str52.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long62 == 1465424054367L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test346"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.IP iP30 = null;
    boolean b31 = server0.connect(iP30);
    tp2.IP iP32 = null;
    boolean b33 = server0.connect(iP32);
    tp2.IP iP34 = null;
    boolean b35 = server0.removeBan(iP34);
    tp2.Server server36 = new tp2.Server();
    java.lang.String str37 = server36.toString();
    tp2.ITime iTime38 = server36.getTime();
    server36.update();
    java.lang.String str40 = server36.toString();
    long long41 = server36.getLastUpdate();
    server36.update();
    tp2.IP iP43 = null;
    boolean b44 = server36.connect(iP43);
    tp2.Server server45 = new tp2.Server();
    java.lang.String str46 = server45.toString();
    tp2.ITime iTime47 = server45.getTime();
    server45.update();
    java.lang.String str49 = server45.toString();
    long long50 = server45.getLastUpdate();
    tp2.ITime iTime51 = server45.getTime();
    tp2.ITime iTime52 = server45.getTime();
    tp2.ITime iTime53 = server45.getTime();
    server36.setTime(iTime53);
    server0.setTime(iTime53);
    server0.update();
    tp2.IP iP57 = null;
    boolean b58 = server0.removeException(iP57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054394, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054394, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str37.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424054395, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424054395, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424054395L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str46.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Server [lastUpdate=1465424054396, exceptions=(), bans={}]"+ "'", str49.equals("Server [lastUpdate=1465424054396, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1465424054396L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test347"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.ITime iTime5 = server0.getTime();
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.ITime iTime10 = server8.getTime();
    server8.update();
    java.lang.String str12 = server8.toString();
    long long13 = server8.getLastUpdate();
    tp2.ITime iTime14 = server8.getTime();
    boolean b15 = server8.repOK();
    tp2.ITime iTime16 = server8.getTime();
    server8.update();
    tp2.ITime iTime18 = server8.getTime();
    server0.setTime(iTime18);
    tp2.IP iP20 = null;
    boolean b21 = server0.connect(iP20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054412, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054412, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=1465424054413, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=1465424054413, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424054413L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test348"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    java.lang.String str16 = server12.toString();
    long long17 = server12.getLastUpdate();
    tp2.ITime iTime18 = server12.getTime();
    server10.setTime(iTime18);
    server0.setTime(iTime18);
    long long21 = server0.getLastUpdate();
    tp2.IP iP22 = null;
    boolean b23 = server0.removeBan(iP22);
    boolean b24 = server0.repOK();
    long long25 = server0.getLastUpdate();
    java.lang.String str26 = server0.toString();
    tp2.ITime iTime27 = server0.getTime();
    long long28 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=1465424054419, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=1465424054419, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1465424054419L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 1465424054418L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424054418L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=1465424054418, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=1465424054418, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 1465424054418L);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test349"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.ITime iTime4 = server0.getTime();
    tp2.IP iP5 = null;
    boolean b6 = server0.addBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    server7.update();
    tp2.ITime iTime18 = server7.getTime();
    tp2.Server server19 = new tp2.Server();
    tp2.ITime iTime20 = null;
    server19.setTime(iTime20);
    tp2.IP iP22 = null;
    boolean b23 = server19.removeException(iP22);
    tp2.IP iP24 = null;
    boolean b25 = server19.connect(iP24);
    boolean b26 = server19.repOK();
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server27.update();
    tp2.IP iP31 = null;
    boolean b32 = server27.removeException(iP31);
    tp2.Server server33 = new tp2.Server();
    java.lang.String str34 = server33.toString();
    tp2.ITime iTime35 = server33.getTime();
    server27.setTime(iTime35);
    server27.update();
    tp2.ITime iTime38 = server27.getTime();
    tp2.ITime iTime39 = server27.getTime();
    server19.setTime(iTime39);
    server7.setTime(iTime39);
    boolean b42 = server7.repOK();
    tp2.Server server43 = new tp2.Server();
    java.lang.String str44 = server43.toString();
    tp2.ITime iTime45 = server43.getTime();
    server43.update();
    tp2.IP iP47 = null;
    boolean b48 = server43.removeException(iP47);
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server43.setTime(iTime51);
    tp2.ITime iTime53 = server43.getTime();
    tp2.Server server54 = new tp2.Server();
    java.lang.String str55 = server54.toString();
    tp2.ITime iTime56 = server54.getTime();
    server54.update();
    tp2.IP iP58 = null;
    boolean b59 = server54.removeException(iP58);
    tp2.Server server60 = new tp2.Server();
    java.lang.String str61 = server60.toString();
    tp2.ITime iTime62 = server60.getTime();
    server54.setTime(iTime62);
    server43.setTime(iTime62);
    server7.setTime(iTime62);
    server0.setTime(iTime62);
    long long67 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str55.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str61.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long67 == 1465424054424L);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test350"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    java.lang.String str8 = server0.toString();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    tp2.ITime iTime13 = server0.getTime();
    tp2.IP iP14 = null;
    boolean b15 = server0.removeException(iP14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054456, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054456, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424054456, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465424054456, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test351"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    server0.update();
    long long11 = server0.getLastUpdate();
    tp2.IP iP12 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b13 = server0.addException(iP12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054458, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054458, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424054458L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054458L);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test352"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    server0.update();
    boolean b8 = server0.repOK();
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    long long11 = server0.getLastUpdate();
    boolean b12 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054458, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054458, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054458L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424054458L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054459, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054459, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054459L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test353"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    long long7 = server0.getLastUpdate();
    java.lang.String str8 = server0.toString();
    long long9 = server0.getLastUpdate();
    java.lang.String str10 = server0.toString();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    java.lang.String str15 = server11.toString();
    tp2.ITime iTime16 = server11.getTime();
    tp2.ITime iTime17 = server11.getTime();
    server0.setTime(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=1465424054460, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=1465424054460, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test354"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    tp2.IP iP8 = null;
    boolean b9 = server0.removeBan(iP8);
    tp2.IP iP10 = null;
    boolean b11 = server0.connect(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server0.connect(iP14);
    java.lang.String str16 = server0.toString();
    tp2.IP iP17 = null;
    boolean b18 = server0.removeException(iP17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test355"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.ITime iTime4 = server0.getTime();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    tp2.ITime iTime10 = server5.getTime();
    server0.setTime(iTime10);
    tp2.IP iP12 = null;
    boolean b13 = server0.removeBan(iP12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054466, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054466, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test356"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    boolean b4 = server0.repOK();
    tp2.Server server5 = new tp2.Server();
    java.lang.String str6 = server5.toString();
    tp2.ITime iTime7 = server5.getTime();
    server5.update();
    java.lang.String str9 = server5.toString();
    tp2.IP iP10 = null;
    boolean b11 = server5.removeBan(iP10);
    tp2.Server server12 = new tp2.Server();
    java.lang.String str13 = server12.toString();
    tp2.ITime iTime14 = server12.getTime();
    server12.update();
    tp2.IP iP16 = null;
    boolean b17 = server12.removeException(iP16);
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server12.setTime(iTime20);
    tp2.ITime iTime22 = server12.getTime();
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server23.update();
    tp2.IP iP27 = null;
    boolean b28 = server23.removeException(iP27);
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server23.setTime(iTime31);
    server12.setTime(iTime31);
    server5.setTime(iTime31);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.ITime iTime37 = server35.getTime();
    server35.update();
    java.lang.String str39 = server35.toString();
    long long40 = server35.getLastUpdate();
    long long41 = server35.getLastUpdate();
    tp2.IP iP42 = null;
    boolean b43 = server35.removeException(iP42);
    java.lang.String str44 = server35.toString();
    tp2.IP iP45 = null;
    boolean b46 = server35.addBan(iP45);
    tp2.Server server47 = new tp2.Server();
    java.lang.String str48 = server47.toString();
    tp2.IP iP49 = null;
    boolean b50 = server47.removeException(iP49);
    tp2.ITime iTime51 = server47.getTime();
    server35.setTime(iTime51);
    server5.setTime(iTime51);
    server0.setTime(iTime51);
    tp2.IP iP55 = null;
    boolean b56 = server0.connect(iP55);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054469, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054469, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424054471, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424054471, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1465424054471L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424054471L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=1465424054471, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=1465424054471, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test357"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.ITime iTime7 = server0.getTime();
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    tp2.IP iP17 = null;
    boolean b18 = server10.connect(iP17);
    tp2.ITime iTime19 = server10.getTime();
    server0.setTime(iTime19);
    tp2.ITime iTime21 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054488, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054488, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=1465424054488, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=1465424054488, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054488, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054488, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054489, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054489, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424054489L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test358"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    tp2.IP iP15 = null;
    boolean b16 = server0.removeBan(iP15);
    tp2.ITime iTime17 = server0.getTime();
    tp2.IP iP18 = null;
    boolean b19 = server0.removeException(iP18);
    server0.update();
    tp2.IP iP21 = null;
    boolean b22 = server0.removeBan(iP21);
    tp2.IP iP23 = null;
    boolean b24 = server0.removeException(iP23);
    tp2.IP iP25 = null;
    boolean b26 = server0.addBan(iP25);
    tp2.IP iP27 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b28 = server0.connect(iP27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test359"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeException(iP7);
    tp2.ITime iTime9 = server0.getTime();
    server0.update();
    boolean b11 = server0.repOK();
    tp2.ITime iTime12 = server0.getTime();
    java.lang.String str13 = server0.toString();
    long long14 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054493, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054493, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054493L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424054493L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Server [lastUpdate=1465424054494, exceptions=(), bans={}]"+ "'", str13.equals("Server [lastUpdate=1465424054494, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 1465424054494L);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test360"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server0.connect(iP13);
    tp2.IP iP15 = null;
    boolean b16 = server0.connect(iP15);
    long long17 = server0.getLastUpdate();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server18.addBan(iP21);
    tp2.ITime iTime23 = server18.getTime();
    long long24 = server18.getLastUpdate();
    tp2.IP iP25 = null;
    boolean b26 = server18.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    tp2.IP iP28 = null;
    boolean b29 = server27.removeException(iP28);
    tp2.IP iP30 = null;
    boolean b31 = server27.removeException(iP30);
    tp2.IP iP32 = null;
    boolean b33 = server27.addBan(iP32);
    tp2.ITime iTime34 = server27.getTime();
    server18.setTime(iTime34);
    server0.setTime(iTime34);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test361"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    long long6 = server0.getLastUpdate();
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    tp2.ITime iTime25 = server19.getTime();
    server17.setTime(iTime25);
    server7.setTime(iTime25);
    server0.setTime(iTime25);
    long long29 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424054499, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424054499, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424054499L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long29 == 0L);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test362"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.IP iP9 = null;
    boolean b10 = server0.removeBan(iP9);
    server0.update();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054503, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054503, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054503L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test363"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.ITime iTime9 = server0.getTime();
    tp2.IP iP10 = null;
    boolean b11 = server0.addBan(iP10);
    long long12 = server0.getLastUpdate();
    long long13 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054504, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054504, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054504L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424054504L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1465424054504L);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test364"); }


    tp2.Server server0 = new tp2.Server();
    tp2.IP iP1 = null;
    boolean b2 = server0.removeException(iP1);
    java.lang.String str3 = server0.toString();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    java.lang.String str6 = server0.toString();
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b9 = server0.addBan(iP8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str3.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424114506]]}]"+ "'", str6.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424114506]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test365"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.removeException(iP6);
    server0.update();
    tp2.IP iP9 = null;
    boolean b10 = server0.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server0.removeException(iP11);
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test366"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    server0.update();
    tp2.ITime iTime11 = server0.getTime();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeException(iP12);
    tp2.ITime iTime14 = server0.getTime();
    server0.update();
    tp2.ITime iTime16 = server0.getTime();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test367"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.ITime iTime5 = server0.getTime();
    tp2.ITime iTime6 = server0.getTime();
    java.lang.String str7 = server0.toString();
    long long8 = server0.getLastUpdate();
    tp2.IP iP9 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b10 = server0.addBan(iP9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424114512]]}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={[IPBan [ip=null, expires=1465424114512]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test368"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.removeException(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.connect(iP4);
    tp2.IP iP6 = null;
    boolean b7 = server0.connect(iP6);
    java.lang.String str8 = server0.toString();
    java.lang.String str9 = server0.toString();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.IP iP12 = null;
    boolean b13 = server10.removeException(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server10.connect(iP14);
    long long16 = server10.getLastUpdate();
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server17.update();
    tp2.IP iP21 = null;
    boolean b22 = server17.removeException(iP21);
    tp2.Server server23 = new tp2.Server();
    java.lang.String str24 = server23.toString();
    tp2.ITime iTime25 = server23.getTime();
    server17.setTime(iTime25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.Server server29 = new tp2.Server();
    java.lang.String str30 = server29.toString();
    tp2.ITime iTime31 = server29.getTime();
    server29.update();
    java.lang.String str33 = server29.toString();
    long long34 = server29.getLastUpdate();
    tp2.ITime iTime35 = server29.getTime();
    server27.setTime(iTime35);
    server17.setTime(iTime35);
    server10.setTime(iTime35);
    server0.setTime(iTime35);
    tp2.Server server40 = new tp2.Server();
    java.lang.String str41 = server40.toString();
    tp2.ITime iTime42 = server40.getTime();
    server40.update();
    java.lang.String str44 = server40.toString();
    long long45 = server40.getLastUpdate();
    server40.update();
    tp2.IP iP47 = null;
    boolean b48 = server40.removeBan(iP47);
    tp2.ITime iTime49 = server40.getTime();
    tp2.IP iP50 = null;
    boolean b51 = server40.removeException(iP50);
    tp2.ITime iTime52 = server40.getTime();
    server0.setTime(iTime52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str24.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str30.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=1465424054515, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=1465424054515, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 1465424054515L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Server [lastUpdate=1465424054515, exceptions=(), bans={}]"+ "'", str44.equals("Server [lastUpdate=1465424054515, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long45 == 1465424054515L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime52);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test369"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    boolean b6 = server0.repOK();
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    long long9 = server0.getLastUpdate();
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    java.lang.String str14 = server10.toString();
    long long15 = server10.getLastUpdate();
    tp2.ITime iTime16 = server10.getTime();
    boolean b17 = server10.repOK();
    tp2.ITime iTime18 = server10.getTime();
    server10.update();
    tp2.ITime iTime20 = server10.getTime();
    tp2.IP iP21 = null;
    boolean b22 = server10.removeBan(iP21);
    tp2.ITime iTime23 = server10.getTime();
    tp2.ITime iTime24 = server10.getTime();
    server0.setTime(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1465424054523L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=1465424054523, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=1465424054523, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1465424054523L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test370"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    long long6 = server0.getLastUpdate();
    server0.update();
    boolean b8 = server0.repOK();
    java.lang.String str9 = server0.toString();
    boolean b10 = server0.repOK();
    server0.update();
    long long12 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054528, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054528, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054528L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1465424054528L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=1465424054528, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=1465424054528, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1465424054528L);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test371"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    long long3 = server0.getLastUpdate();
    server0.update();
    server0.update();
    tp2.Server server6 = new tp2.Server();
    tp2.ITime iTime7 = null;
    server6.setTime(iTime7);
    tp2.IP iP9 = null;
    boolean b10 = server6.removeException(iP9);
    tp2.IP iP11 = null;
    boolean b12 = server6.connect(iP11);
    tp2.IP iP13 = null;
    boolean b14 = server6.removeBan(iP13);
    tp2.ITime iTime15 = server6.getTime();
    tp2.Server server16 = new tp2.Server();
    tp2.IP iP17 = null;
    boolean b18 = server16.removeException(iP17);
    java.lang.String str19 = server16.toString();
    java.lang.String str20 = server16.toString();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    tp2.IP iP25 = null;
    boolean b26 = server21.removeException(iP25);
    tp2.Server server27 = new tp2.Server();
    java.lang.String str28 = server27.toString();
    tp2.ITime iTime29 = server27.getTime();
    server21.setTime(iTime29);
    server21.update();
    tp2.ITime iTime32 = server21.getTime();
    server16.setTime(iTime32);
    server6.setTime(iTime32);
    server0.setTime(iTime32);
    tp2.IP iP36 = null;
    boolean b37 = server0.connect(iP36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str28.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test372"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    tp2.IP iP5 = null;
    boolean b6 = server0.removeBan(iP5);
    tp2.Server server7 = new tp2.Server();
    java.lang.String str8 = server7.toString();
    tp2.ITime iTime9 = server7.getTime();
    server7.update();
    tp2.IP iP11 = null;
    boolean b12 = server7.removeException(iP11);
    tp2.Server server13 = new tp2.Server();
    java.lang.String str14 = server13.toString();
    tp2.ITime iTime15 = server13.getTime();
    server7.setTime(iTime15);
    tp2.ITime iTime17 = server7.getTime();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server7.setTime(iTime26);
    server0.setTime(iTime26);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server30.update();
    java.lang.String str34 = server30.toString();
    long long35 = server30.getLastUpdate();
    long long36 = server30.getLastUpdate();
    tp2.IP iP37 = null;
    boolean b38 = server30.removeException(iP37);
    java.lang.String str39 = server30.toString();
    tp2.IP iP40 = null;
    boolean b41 = server30.addBan(iP40);
    tp2.Server server42 = new tp2.Server();
    java.lang.String str43 = server42.toString();
    tp2.IP iP44 = null;
    boolean b45 = server42.removeException(iP44);
    tp2.ITime iTime46 = server42.getTime();
    server30.setTime(iTime46);
    server0.setTime(iTime46);
    tp2.ITime iTime49 = server0.getTime();
    tp2.IP iP50 = null;
    boolean b51 = server0.removeException(iP50);
    tp2.IP iP52 = null;
    boolean b53 = server0.addBan(iP52);
    tp2.IP iP54 = null;
    boolean b55 = server0.removeException(iP54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054534, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054534, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str8.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str14.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Server [lastUpdate=1465424054535, exceptions=(), bans={}]"+ "'", str34.equals("Server [lastUpdate=1465424054535, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 1465424054535L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 1465424054535L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=1465424054535, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=1465424054535, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str43.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test373"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    tp2.ITime iTime14 = server4.getTime();
    server0.setTime(iTime14);
    tp2.IP iP16 = null;
    boolean b17 = server0.removeException(iP16);
    server0.update();
    tp2.Server server19 = new tp2.Server();
    java.lang.String str20 = server19.toString();
    tp2.ITime iTime21 = server19.getTime();
    server19.update();
    java.lang.String str23 = server19.toString();
    long long24 = server19.getLastUpdate();
    long long25 = server19.getLastUpdate();
    tp2.IP iP26 = null;
    boolean b27 = server19.connect(iP26);
    tp2.IP iP28 = null;
    boolean b29 = server19.removeBan(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server19.setTime(iTime32);
    server0.setTime(iTime32);
    tp2.IP iP35 = null;
    boolean b36 = server0.connect(iP35);
    server0.update();
    tp2.Server server38 = new tp2.Server();
    java.lang.String str39 = server38.toString();
    tp2.ITime iTime40 = server38.getTime();
    server38.update();
    tp2.IP iP42 = null;
    boolean b43 = server38.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server38.setTime(iTime46);
    tp2.ITime iTime48 = server38.getTime();
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server49.update();
    tp2.IP iP53 = null;
    boolean b54 = server49.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    tp2.ITime iTime57 = server55.getTime();
    server49.setTime(iTime57);
    server38.setTime(iTime57);
    long long60 = server38.getLastUpdate();
    boolean b61 = server38.repOK();
    tp2.IP iP62 = null;
    boolean b63 = server38.removeException(iP62);
    tp2.IP iP64 = null;
    boolean b65 = server38.removeBan(iP64);
    tp2.ITime iTime66 = server38.getTime();
    server0.setTime(iTime66);
    long long68 = server0.getLastUpdate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str20.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Server [lastUpdate=1465424054548, exceptions=(), bans={}]"+ "'", str23.equals("Server [lastUpdate=1465424054548, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1465424054548L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 1465424054548L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str39.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 1465424054548L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long68 == 1465424054548L);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test374"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.IP iP2 = null;
    boolean b3 = server0.connect(iP2);
    tp2.IP iP4 = null;
    boolean b5 = server0.removeBan(iP4);
    tp2.ITime iTime6 = server0.getTime();
    server0.update();
    server0.update();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test375"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    tp2.IP iP3 = null;
    boolean b4 = server0.addBan(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.removeException(iP5);
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server10.update();
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.IP iP18 = null;
    boolean b19 = server14.removeException(iP18);
    tp2.Server server20 = new tp2.Server();
    java.lang.String str21 = server20.toString();
    tp2.ITime iTime22 = server20.getTime();
    server14.setTime(iTime22);
    tp2.ITime iTime24 = server14.getTime();
    server10.setTime(iTime24);
    server0.setTime(iTime24);
    tp2.ITime iTime27 = server0.getTime();
    tp2.IP iP28 = null;
    boolean b29 = server0.removeException(iP28);
    tp2.IP iP30 = null;
    boolean b31 = server0.removeException(iP30);
    tp2.Server server32 = new tp2.Server();
    java.lang.String str33 = server32.toString();
    tp2.ITime iTime34 = server32.getTime();
    server32.update();
    java.lang.String str36 = server32.toString();
    tp2.ITime iTime37 = server32.getTime();
    tp2.IP iP38 = null;
    boolean b39 = server32.connect(iP38);
    long long40 = server32.getLastUpdate();
    tp2.ITime iTime41 = server32.getTime();
    boolean b42 = server32.repOK();
    tp2.ITime iTime43 = server32.getTime();
    server0.setTime(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str21.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str33.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=1465424054577, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=1465424054577, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 1465424054577L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test376"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    tp2.IP iP5 = null;
    boolean b6 = server0.connect(iP5);
    tp2.IP iP7 = null;
    boolean b8 = server0.connect(iP7);
    tp2.Server server9 = new tp2.Server();
    java.lang.String str10 = server9.toString();
    tp2.IP iP11 = null;
    boolean b12 = server9.removeException(iP11);
    tp2.ITime iTime13 = server9.getTime();
    server0.setTime(iTime13);
    tp2.ITime iTime15 = server0.getTime();
    tp2.IP iP16 = null;
    boolean b17 = server0.removeBan(iP16);
    boolean b18 = server0.repOK();
    tp2.IP iP19 = null;
    boolean b20 = server0.removeException(iP19);
    tp2.ITime iTime21 = server0.getTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime21);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test377"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    java.lang.String str4 = server0.toString();
    long long5 = server0.getLastUpdate();
    server0.update();
    tp2.IP iP7 = null;
    boolean b8 = server0.removeBan(iP7);
    tp2.ITime iTime9 = server0.getTime();
    java.lang.String str10 = server0.toString();
    server0.update();
    tp2.IP iP12 = null;
    boolean b13 = server0.removeBan(iP12);
    tp2.Server server14 = new tp2.Server();
    java.lang.String str15 = server14.toString();
    tp2.ITime iTime16 = server14.getTime();
    server14.update();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.ITime iTime20 = server18.getTime();
    server18.update();
    tp2.IP iP22 = null;
    boolean b23 = server18.removeException(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server18.setTime(iTime26);
    server14.setTime(iTime26);
    tp2.IP iP29 = null;
    boolean b30 = server14.removeBan(iP29);
    tp2.ITime iTime31 = server14.getTime();
    tp2.IP iP32 = null;
    boolean b33 = server14.removeException(iP32);
    tp2.Server server34 = new tp2.Server();
    java.lang.String str35 = server34.toString();
    tp2.ITime iTime36 = server34.getTime();
    server34.update();
    java.lang.String str38 = server34.toString();
    tp2.IP iP39 = null;
    boolean b40 = server34.removeBan(iP39);
    long long41 = server34.getLastUpdate();
    tp2.IP iP42 = null;
    boolean b43 = server34.removeException(iP42);
    tp2.Server server44 = new tp2.Server();
    java.lang.String str45 = server44.toString();
    tp2.ITime iTime46 = server44.getTime();
    server44.update();
    java.lang.String str48 = server44.toString();
    long long49 = server44.getLastUpdate();
    long long50 = server44.getLastUpdate();
    tp2.IP iP51 = null;
    boolean b52 = server44.removeException(iP51);
    java.lang.String str53 = server44.toString();
    boolean b54 = server44.repOK();
    tp2.IP iP55 = null;
    boolean b56 = server44.connect(iP55);
    tp2.Server server57 = new tp2.Server();
    java.lang.String str58 = server57.toString();
    tp2.ITime iTime59 = server57.getTime();
    server57.update();
    tp2.IP iP61 = null;
    boolean b62 = server57.addBan(iP61);
    tp2.ITime iTime63 = server57.getTime();
    server44.setTime(iTime63);
    server34.setTime(iTime63);
    server14.setTime(iTime63);
    server0.setTime(iTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Server [lastUpdate=1465424054592, exceptions=(), bans={}]"+ "'", str4.equals("Server [lastUpdate=1465424054592, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 1465424054592L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Server [lastUpdate=1465424054592, exceptions=(), bans={}]"+ "'", str10.equals("Server [lastUpdate=1465424054592, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str15.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str35.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=1465424054593, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=1465424054593, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long41 == 1465424054593L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Server [lastUpdate=1465424054594, exceptions=(), bans={}]"+ "'", str48.equals("Server [lastUpdate=1465424054594, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 1465424054594L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long50 == 1465424054594L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Server [lastUpdate=1465424054594, exceptions=(), bans={}]"+ "'", str53.equals("Server [lastUpdate=1465424054594, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str58.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime63);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test378"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.Server server4 = new tp2.Server();
    java.lang.String str5 = server4.toString();
    tp2.ITime iTime6 = server4.getTime();
    server4.update();
    tp2.IP iP8 = null;
    boolean b9 = server4.removeException(iP8);
    tp2.Server server10 = new tp2.Server();
    java.lang.String str11 = server10.toString();
    tp2.ITime iTime12 = server10.getTime();
    server4.setTime(iTime12);
    server0.setTime(iTime12);
    boolean b15 = server0.repOK();
    server0.update();
    tp2.IP iP17 = null;
    boolean b18 = server0.addBan(iP17);
    long long19 = server0.getLastUpdate();
    boolean b20 = server0.repOK();
    tp2.Server server21 = new tp2.Server();
    java.lang.String str22 = server21.toString();
    tp2.ITime iTime23 = server21.getTime();
    server21.update();
    java.lang.String str25 = server21.toString();
    long long26 = server21.getLastUpdate();
    tp2.ITime iTime27 = server21.getTime();
    boolean b28 = server21.repOK();
    tp2.ITime iTime29 = server21.getTime();
    server21.update();
    tp2.ITime iTime31 = server21.getTime();
    server21.update();
    tp2.ITime iTime33 = server21.getTime();
    server0.setTime(iTime33);
    tp2.IP iP35 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b36 = server0.addException(iP35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str11.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1465424054610L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str22.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424054611, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=1465424054611, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 1465424054611L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test379"); }


    tp2.Server server0 = new tp2.Server();
    tp2.ITime iTime1 = null;
    server0.setTime(iTime1);
    tp2.IP iP3 = null;
    boolean b4 = server0.removeException(iP3);
    java.lang.String str5 = server0.toString();
    long long6 = server0.getLastUpdate();
    java.lang.String str7 = server0.toString();
    tp2.Server server8 = new tp2.Server();
    java.lang.String str9 = server8.toString();
    tp2.IP iP10 = null;
    boolean b11 = server8.removeException(iP10);
    tp2.IP iP12 = null;
    boolean b13 = server8.connect(iP12);
    tp2.IP iP14 = null;
    boolean b15 = server8.connect(iP14);
    java.lang.String str16 = server8.toString();
    java.lang.String str17 = server8.toString();
    tp2.Server server18 = new tp2.Server();
    java.lang.String str19 = server18.toString();
    tp2.IP iP20 = null;
    boolean b21 = server18.removeException(iP20);
    tp2.IP iP22 = null;
    boolean b23 = server18.connect(iP22);
    long long24 = server18.getLastUpdate();
    tp2.Server server25 = new tp2.Server();
    java.lang.String str26 = server25.toString();
    tp2.ITime iTime27 = server25.getTime();
    server25.update();
    tp2.IP iP29 = null;
    boolean b30 = server25.removeException(iP29);
    tp2.Server server31 = new tp2.Server();
    java.lang.String str32 = server31.toString();
    tp2.ITime iTime33 = server31.getTime();
    server25.setTime(iTime33);
    tp2.Server server35 = new tp2.Server();
    java.lang.String str36 = server35.toString();
    tp2.Server server37 = new tp2.Server();
    java.lang.String str38 = server37.toString();
    tp2.ITime iTime39 = server37.getTime();
    server37.update();
    java.lang.String str41 = server37.toString();
    long long42 = server37.getLastUpdate();
    tp2.ITime iTime43 = server37.getTime();
    server35.setTime(iTime43);
    server25.setTime(iTime43);
    server18.setTime(iTime43);
    server8.setTime(iTime43);
    server0.setTime(iTime43);
    tp2.IP iP49 = null;
    boolean b50 = server0.addBan(iP49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str5.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str9.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str16.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str17.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str19.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str26.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str32.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str36.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str38.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Server [lastUpdate=1465424054614, exceptions=(), bans={}]"+ "'", str41.equals("Server [lastUpdate=1465424054614, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1465424054614L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test380"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.addBan(iP4);
    tp2.ITime iTime6 = server0.getTime();
    long long7 = server0.getLastUpdate();
    server0.update();
    server0.update();
    tp2.IP iP10 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b11 = server0.addBan(iP10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424054621L);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test381"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.addBan(iP22);
    java.lang.String str24 = server0.toString();
    java.lang.String str25 = server0.toString();
    tp2.IP iP26 = null;
    boolean b27 = server0.removeException(iP26);
    tp2.IP iP28 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b29 = server0.addBan(iP28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Server [lastUpdate=1465424054621, exceptions=(), bans={[IPBan [ip=null, expires=1465424114622]]}]"+ "'", str24.equals("Server [lastUpdate=1465424054621, exceptions=(), bans={[IPBan [ip=null, expires=1465424114622]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=1465424054621, exceptions=(), bans={[IPBan [ip=null, expires=1465424114622]]}]"+ "'", str25.equals("Server [lastUpdate=1465424054621, exceptions=(), bans={[IPBan [ip=null, expires=1465424114622]]}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test382"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    java.lang.String str6 = server0.toString();
    long long7 = server0.getLastUpdate();
    tp2.IP iP8 = null;
    boolean b9 = server0.connect(iP8);
    long long10 = server0.getLastUpdate();
    long long11 = server0.getLastUpdate();
    boolean b12 = server0.repOK();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Server [lastUpdate=1465424054623, exceptions=(), bans={}]"+ "'", str6.equals("Server [lastUpdate=1465424054623, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1465424054623L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1465424054623L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1465424054623L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest4.test383"); }


    tp2.Server server0 = new tp2.Server();
    java.lang.String str1 = server0.toString();
    tp2.ITime iTime2 = server0.getTime();
    server0.update();
    tp2.IP iP4 = null;
    boolean b5 = server0.removeException(iP4);
    tp2.Server server6 = new tp2.Server();
    java.lang.String str7 = server6.toString();
    tp2.ITime iTime8 = server6.getTime();
    server0.setTime(iTime8);
    tp2.ITime iTime10 = server0.getTime();
    tp2.Server server11 = new tp2.Server();
    java.lang.String str12 = server11.toString();
    tp2.ITime iTime13 = server11.getTime();
    server11.update();
    tp2.IP iP15 = null;
    boolean b16 = server11.removeException(iP15);
    tp2.Server server17 = new tp2.Server();
    java.lang.String str18 = server17.toString();
    tp2.ITime iTime19 = server17.getTime();
    server11.setTime(iTime19);
    server0.setTime(iTime19);
    tp2.IP iP22 = null;
    boolean b23 = server0.connect(iP22);
    tp2.Server server24 = new tp2.Server();
    java.lang.String str25 = server24.toString();
    tp2.ITime iTime26 = server24.getTime();
    server24.update();
    tp2.IP iP28 = null;
    boolean b29 = server24.removeException(iP28);
    tp2.Server server30 = new tp2.Server();
    java.lang.String str31 = server30.toString();
    tp2.ITime iTime32 = server30.getTime();
    server24.setTime(iTime32);
    server24.update();
    tp2.ITime iTime35 = server24.getTime();
    server0.setTime(iTime35);
    tp2.IP iP37 = null;
    boolean b38 = server0.removeException(iP37);
    long long39 = server0.getLastUpdate();
    java.lang.String str40 = server0.toString();
    tp2.Server server41 = new tp2.Server();
    java.lang.String str42 = server41.toString();
    tp2.ITime iTime43 = server41.getTime();
    server41.update();
    java.lang.String str45 = server41.toString();
    tp2.IP iP46 = null;
    boolean b47 = server41.removeBan(iP46);
    tp2.ITime iTime48 = server41.getTime();
    tp2.Server server49 = new tp2.Server();
    java.lang.String str50 = server49.toString();
    tp2.ITime iTime51 = server49.getTime();
    server49.update();
    tp2.IP iP53 = null;
    boolean b54 = server49.removeException(iP53);
    tp2.Server server55 = new tp2.Server();
    java.lang.String str56 = server55.toString();
    tp2.ITime iTime57 = server55.getTime();
    server49.setTime(iTime57);
    tp2.ITime iTime59 = server49.getTime();
    server41.setTime(iTime59);
    server0.setTime(iTime59);
    tp2.IP iP62 = null;
    boolean b63 = server0.removeException(iP62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str1.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str7.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str12.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str18.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str25.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str31.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long39 == 1465424054624L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Server [lastUpdate=1465424054624, exceptions=(), bans={}]"+ "'", str40.equals("Server [lastUpdate=1465424054624, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str42.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Server [lastUpdate=1465424054626, exceptions=(), bans={}]"+ "'", str45.equals("Server [lastUpdate=1465424054626, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str50.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Server [lastUpdate=0, exceptions=(), bans={}]"+ "'", str56.equals("Server [lastUpdate=0, exceptions=(), bans={}]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

}
